generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([expires_at])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 UserRole              @default(USER)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  stripeCustomerId     String?               @unique
  subscriptionId       String?               @unique
  subscriptionStatus   String?
  subscriptionPlan     String?
  subscriptionEndDate  DateTime?
  cancelAtPeriodEnd    Boolean               @default(false)
  accounts             Account[]
  analyticsConnections AnalyticsConnection[]
  bots                 Bot[]
  botRecommendations   BotRecommendation[]
  couponRedemptions    CouponRedemption[]
  messages             Message[]
  missions             Mission[]
  payments             Payment[]
  premiumAccess        PremiumAccess?
  refundRequests       RefundRequest[]
  sessions             Session[]
  assignedTickets      SupportTicket[]       @relation("AssignedTickets")
  supportTickets       SupportTicket[]
  targetedCompanies    TargetedCompany[]
  userCredits          UserCredits?

  @@index([role])
  @@index([email])
  @@index([createdAt])
  @@index([subscriptionStatus])
  @@index([subscriptionPlan])
  @@index([subscriptionEndDate])
  @@index([stripeCustomerId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model AgentPrompt {
  id           String   @id @default(cuid())
  agentId      String   @unique
  agentName    String
  systemPrompt String
  rolePrompt   String
  instructions String
  isActive     Boolean  @default(true)
  version      Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?

  @@index([agentId])
  @@index([isActive])
  @@index([createdAt])
  @@index([createdBy])
}

model Mission {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  source            String
  sourceEventId     String?
  objective         String
  deadline          DateTime?
  priority          String?
  context           String?
  status            String              @default("received")
  notionPageId      String?
  slackMessageTs    String?
  userId            String?
  botId             String?
  recommendations   BotRecommendation[]
  briefs            Brief[]
  deliverables      Deliverable[]
  bot               Bot?                @relation(fields: [botId], references: [id])
  user              User?               @relation(fields: [userId], references: [id])
  orchestrationPlan OrchestrationPlan?
  report            Report?

  @@index([userId])
  @@index([botId])
  @@index([status])
  @@index([priority])
  @@index([source])
  @@index([createdAt])
  @@index([deadline])
  @@index([status, priority])
  @@index([userId, status])
  @@index([botId, status])
  @@index([createdAt, status])
}

model Brief {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  missionId   String
  agent       String
  contentJson Json
  status      String       @default("queued")
  mission     Mission      @relation(fields: [missionId], references: [id])
  deliverable Deliverable?

  @@index([missionId])
  @@index([agent])
  @@index([status])
  @@index([createdAt])
  @@index([missionId, status])
  @@index([agent, status])
}

model Deliverable {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  missionId String
  briefId   String?  @unique
  agent     String
  output    Json
  brief     Brief?   @relation(fields: [briefId], references: [id])
  mission   Mission  @relation(fields: [missionId], references: [id])

  @@index([missionId])
  @@index([agent])
  @@index([createdAt])
  @@index([missionId, agent])
}

model Report {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  missionId String   @unique
  summary   String
  detailsMd String
  cautions  String?
  nextSteps String?
  mission   Mission  @relation(fields: [missionId], references: [id])

  @@index([createdAt])
}

model OrchestrationPlan {
  id                String    @id @default(cuid())
  missionId         String    @unique
  agents            String[]
  workflow          Json
  estimatedDuration Int
  confidence        Int
  risks             String[]
  alternatives      Json
  status            String    @default("created")
  executedAt        DateTime?
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  mission           Mission   @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([missionId])
  @@index([status])
  @@index([createdAt])
  @@index([confidence])
  @@index([status, confidence])
}

model AnalyticsConnection {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  propertyId   String
  propertyName String
  websiteUrl   String?
  accessToken  String
  refreshToken String
  lastSync     DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
  @@index([lastSync])
  @@index([userId, lastSync])
}

model ExecutionLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  missionId String?
  briefId   String?
  stage     String
  level     String
  message   String
  meta      Json?

  @@index([missionId])
  @@index([briefId])
  @@index([stage])
  @@index([level])
  @@index([createdAt])
  @@index([missionId, stage])
  @@index([createdAt, level])
}

model WebhookEvent {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  source        String
  externalId    String    @unique
  payload       Json
  processedAt   DateTime?
  missionId     String?
  processingErr String?

  @@index([source])
  @@index([missionId])
  @@index([createdAt])
  @@index([processedAt])
  @@index([source, processedAt])
  @@index([missionId, processedAt])
}

model Coupon {
  id          String             @id @default(cuid())
  code        String             @unique
  type        CouponType
  status      CouponStatus       @default(ACTIVE)
  description String?
  planId      String?
  duration    Int?
  discount    Int?
  maxUses     Int?
  currentUses Int                @default(0)
  validFrom   DateTime           @default(now())
  validUntil  DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String
  notes       String?
  redemptions CouponRedemption[]

  @@index([type])
  @@index([status])
  @@index([planId])
  @@index([validFrom])
  @@index([validUntil])
  @@index([createdBy])
  @@index([status, validUntil])
  @@index([type, status])
}

model CouponRedemption {
  id            String    @id @default(cuid())
  couponId      String
  userId        String
  redeemedAt    DateTime  @default(now())
  planActivated String?
  expiresAt     DateTime?
  coupon        Coupon    @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId])
  @@index([couponId])
  @@index([userId])
  @@index([redeemedAt])
  @@index([expiresAt])
  @@index([planActivated])
}

model PremiumAccess {
  id        String   @id @default(cuid())
  userId    String   @unique
  planId    String
  startDate DateTime @default(now())
  endDate   DateTime
  isActive  Boolean  @default(true)
  source    String
  sourceId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  notes     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
  @@index([source])
  @@index([createdBy])
  @@index([isActive, endDate])
  @@index([planId, isActive])
}

model UserCredits {
  id             String          @id @default(cuid())
  userId         String          @unique
  planId         String
  creditsUsed    Int             @default(0)
  creditsLimit   Int
  resetDate      DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  refundRequests RefundRequest[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([resetDate])
  @@index([creditsUsed])
  @@index([planId, resetDate])
}

model RefundRequest {
  id            String       @id @default(cuid())
  userId        String
  missionId     String?
  amount        Int
  reason        RefundReason
  description   String
  status        RefundStatus @default(PENDING)
  reviewedBy    String?
  reviewedAt    DateTime?
  adminNotes    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userCreditsId String
  userCredits   UserCredits  @relation(fields: [userCreditsId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([missionId])
  @@index([status])
  @@index([reason])
  @@index([reviewedBy])
  @@index([createdAt])
  @@index([reviewedAt])
  @@index([status, createdAt])
  @@index([userId, status])
}

model Payment {
  id                   String    @id @default(cuid())
  stripeInvoiceId      String    @unique
  stripeCustomerId     String
  stripeSubscriptionId String?
  amount               Int
  currency             String    @default("usd")
  status               String
  paymentDate          DateTime  @default(now())
  refunded             Boolean   @default(false)
  refundAmount         Int?
  refundDate           DateTime?
  metadata             Json?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [stripeCustomerId], references: [stripeCustomerId])

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([paymentDate])
  @@index([refunded])
  @@index([currency])
  @@index([amount])
  @@index([status, paymentDate])
  @@index([stripeCustomerId, status])
  @@index([refunded, refundDate])
}

model Bot {
  id              String              @id @default(cuid())
  name            String
  type            String
  description     String?
  isActive        Boolean             @default(true)
  capabilities    String[]
  settings        Json?
  userId          String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendations BotRecommendation[]
  messages        Message[]
  missions        Mission[]

  @@index([userId])
  @@index([type])
  @@index([isActive])
  @@index([createdAt])
  @@index([type, isActive])
  @@index([userId, isActive])
}

model BotRecommendation {
  id                  String   @id @default(cuid())
  type                String
  priority            String
  title               String
  description         String
  impact              String
  effort              String
  estimatedTime       String
  category            String
  tags                String[]
  status              String   @default("pending")
  implementationNotes String?
  userId              String
  botId               String?
  missionId           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  bot                 Bot?     @relation(fields: [botId], references: [id])
  mission             Mission? @relation(fields: [missionId], references: [id])
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([botId])
  @@index([missionId])
  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([userId, status])
  @@index([botId, status])
  @@index([type, priority])
  @@index([status, priority])
  @@index([userId, type])
  @@index([botId, type])
  @@index([createdAt, status])
  @@index([userId, createdAt])
}

model Message {
  id            String          @id @default(cuid())
  type          MessageType
  status        MessageStatus   @default(PENDING)
  priority      MessagePriority @default(NORMAL)
  subject       String
  body          String
  bodyHtml      String?
  fromEmail     String
  fromName      String?
  toEmail       String
  toName        String?
  ccEmails      String[]
  bccEmails     String[]
  messageId     String?         @unique
  threadId      String?
  replyToId     String?
  templateId    String?
  headers       Json?
  attachments   Json?
  metadata      Json?
  userId        String?
  ticketId      String?
  botId         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  bot           Bot?            @relation(fields: [botId], references: [id])
  parentMessage Message?        @relation("MessageReplies", fields: [replyToId], references: [id])
  replies       Message[]       @relation("MessageReplies")
  ticket        SupportTicket?  @relation(fields: [ticketId], references: [id])
  user          User?           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([threadId])
  @@index([createdAt])
  @@index([sentAt])
  @@index([ticketId])
  @@index([botId])
  @@index([fromEmail])
  @@index([toEmail])
  @@index([userId, type])
  @@index([status, createdAt])
  @@index([threadId, createdAt])
  @@index([ticketId, createdAt])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  subject     String
  body        String
  bodyHtml    String?
  variables   String[]
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?

  @@index([category])
  @@index([isActive])
  @@index([createdBy])
}

model SupportTicket {
  id           String          @id @default(cuid())
  ticketNumber String          @unique
  status       TicketStatus    @default(OPEN)
  priority     MessagePriority @default(NORMAL)
  category     TicketCategory
  subject      String
  description  String
  assignedTo   String?
  assignedAt   DateTime?
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  resolvedAt   DateTime?
  closedAt     DateTime?
  messages     Message[]
  assignee     User?           @relation("AssignedTickets", fields: [assignedTo], references: [id])
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([assignedTo])
  @@index([createdAt])
  @@index([resolvedAt])
  @@index([status, priority])
  @@index([userId, status])
  @@index([assignedTo, status])
}

model MessageThread {
  id            String   @id @default(cuid())
  threadId      String   @unique
  subject       String
  lastMessageAt DateTime @default(now())
  participants  String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([lastMessageAt])
  @@index([participants])
}

model TargetedCompany {
  id           String   @id @default(cuid())
  name         String
  address      String
  phone        String?
  website      String?
  email        String?
  placeId      String   @unique
  location     Json
  hasWebsite   Boolean  @default(false)
  hasEmail     Boolean  @default(false)
  hasPhone     Boolean  @default(false)
  campaignName String   @default("Default Campaign")
  notes        String?
  status       String   @default("pending")
  addedBy      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [addedBy], references: [id], onDelete: Cascade)

  @@index([addedBy])
  @@index([status])
  @@index([campaignName])
  @@index([hasWebsite])
  @@index([hasEmail])
  @@index([hasPhone])
  @@index([createdAt])
  @@index([addedBy, status])
  @@index([campaignName, status])
  @@index([hasWebsite, status])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum CouponType {
  PREMIUM_TRIAL
  PLAN_UPGRADE
  DISCOUNT
}

enum CouponStatus {
  ACTIVE
  USED
  EXPIRED
  DISABLED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum RefundReason {
  QUALITY_ISSUE
  TECHNICAL_PROBLEM
  NOT_SATISFIED
  DUPLICATE_CHARGE
  OTHER
}

enum MessageType {
  INBOUND
  OUTBOUND
  INTERNAL
  SUPPORT
}

enum MessageStatus {
  DRAFT
  SENT
  DELIVERED
  READ
  FAILED
  PENDING
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG_REPORT
  GENERAL
  FEEDBACK
}
