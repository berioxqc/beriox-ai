datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth.js tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  missions      Mission[] // Relation avec les missions créées par l'utilisateur
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mission {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  source         String
  sourceEventId  String?
  objective      String
  deadline       DateTime?
  priority       String?
  context        String?
  status         String        @default("received")
  briefs         Brief[]
  deliverables   Deliverable[]
  report         Report?
  notionPageId   String?
  slackMessageTs String?
  userId         String?       // Utilisateur qui a créé la mission
  user           User?         @relation(fields: [userId], references: [id])
}

model Brief {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  missionId   String
  agent       String
  contentJson Json
  status      String      @default("queued")
  mission     Mission     @relation(fields: [missionId], references: [id])
  deliverable Deliverable?
}

model Deliverable {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  missionId  String
  briefId    String?  @unique
  agent      String
  output     Json
  mission    Mission  @relation(fields: [missionId], references: [id])
  brief      Brief?   @relation(fields: [briefId], references: [id])
}

model Report {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  missionId  String   @unique
  summary    String
  detailsMd  String
  cautions   String?
  nextSteps  String?
  mission    Mission  @relation(fields: [missionId], references: [id])
}

model AnalyticsConnection {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  propertyId   String
  propertyName String
  websiteUrl   String?
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  lastSync     DateTime?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, propertyId])
}

model ExecutionLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  missionId  String?
  briefId    String?
  stage      String
  level      String
  message    String
  meta       Json?
}

model WebhookEvent {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  source        String
  externalId    String   @unique
  payload       Json
  processedAt   DateTime?
  missionId     String?
  processingErr String?
}


