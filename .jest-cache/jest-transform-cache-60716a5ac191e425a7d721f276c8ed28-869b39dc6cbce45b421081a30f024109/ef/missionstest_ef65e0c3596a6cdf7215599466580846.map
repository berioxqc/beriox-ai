{"version":3,"sources":["/Users/jean-francoisrioux-bergeron/beriox-ai/src/__tests__/temp/missions.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { GET, POST } from '../missions/route';\nimport { createMockUser, createMockMission, mockPrismaQuery, mockPrismaError } from '@/lib/testing/test-utils';\n\n// Mock NextAuth\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}));\n\n// Mock Prisma\njest.mock('@/lib/prisma', () => ({\n  prisma: {\n    mission: {\n      findMany: jest.fn(),\n      create: jest.fn(),\n      findUnique: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    user: {\n      findUnique: jest.fn(),\n    },\n  },\n}));\n\ndescribe('/api/missions', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('GET', () => {\n    it('returns missions for authenticated user', async () => {\n      const mockUser = createMockUser();\n      const mockMissions = [\n        createMockMission({ id: 'mission-1', title: 'Mission 1' }),\n        createMockMission({ id: 'mission-2', title: 'Mission 2' }),\n      ];\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n      mockPrismaQuery('mission', 'findMany', mockMissions);\n\n      const request = new NextRequest('http://localhost:3000/api/missions');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.missions).toHaveLength(2);\n      expect(data.missions[0].title).toBe('Mission 1');\n      expect(data.missions[1].title).toBe('Mission 2');\n    });\n\n    it('returns 401 for unauthenticated user', async () => {\n      // Mock NextAuth session as null\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/missions');\n      const response = await GET(request);\n\n      expect(response.status).toBe(401);\n    });\n\n    it('handles database errors gracefully', async () => {\n      const mockUser = createMockUser();\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma error\n      mockPrismaError('mission', 'findMany', new Error('Database error'));\n\n      const request = new NextRequest('http://localhost:3000/api/missions');\n      const response = await GET(request);\n\n      expect(response.status).toBe(500);\n    });\n\n    it('filters missions by status', async () => {\n      const mockUser = createMockUser();\n      const mockMissions = [\n        createMockMission({ id: 'mission-1', status: 'COMPLETED' }),\n      ];\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n      mockPrismaQuery('mission', 'findMany', mockMissions);\n\n      const request = new NextRequest('http://localhost:3000/api/missions?status=COMPLETED');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.missions).toHaveLength(1);\n      expect(data.missions[0].status).toBe('COMPLETED');\n    });\n\n    it('paginates results correctly', async () => {\n      const mockUser = createMockUser();\n      const mockMissions = Array.from({ length: 10 }, (_, i) =>\n        createMockMission({ id: `mission-${i}`, title: `Mission ${i}` })\n      );\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n      mockPrismaQuery('mission', 'findMany', mockMissions.slice(0, 5));\n\n      const request = new NextRequest('http://localhost:3000/api/missions?page=1&limit=5');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.missions).toHaveLength(5);\n    });\n  });\n\n  describe('POST', () => {\n    it('creates a new mission successfully', async () => {\n      const mockUser = createMockUser();\n      const newMission = createMockMission({\n        id: 'new-mission',\n        title: 'New Mission',\n        description: 'Mission description',\n      });\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n      mockPrismaQuery('mission', 'create', newMission);\n\n      const requestBody = {\n        title: 'New Mission',\n        description: 'Mission description',\n        agentId: 'karine-ai',\n        type: 'content',\n        complexity: 'medium',\n        urgency: 'high',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/missions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(data.mission.title).toBe('New Mission');\n      expect(data.mission.description).toBe('Mission description');\n    });\n\n    it('validates required fields', async () => {\n      const mockUser = createMockUser();\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n\n      const requestBody = {\n        // Missing required fields\n        description: 'Mission description',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/missions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toContain('title');\n    });\n\n    it('validates agent ID', async () => {\n      const mockUser = createMockUser();\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n\n      const requestBody = {\n        title: 'New Mission',\n        description: 'Mission description',\n        agentId: 'invalid-agent',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/missions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toContain('agentId');\n    });\n\n    it('handles database creation errors', async () => {\n      const mockUser = createMockUser();\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n      mockPrismaError('mission', 'create', new Error('Creation failed'));\n\n      const requestBody = {\n        title: 'New Mission',\n        description: 'Mission description',\n        agentId: 'karine-ai',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/missions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await POST(request);\n\n      expect(response.status).toBe(500);\n    });\n\n    it('validates mission type', async () => {\n      const mockUser = createMockUser();\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n\n      const requestBody = {\n        title: 'New Mission',\n        description: 'Mission description',\n        agentId: 'karine-ai',\n        type: 'invalid-type',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/missions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toContain('type');\n    });\n\n    it('validates complexity level', async () => {\n      const mockUser = createMockUser();\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n\n      const requestBody = {\n        title: 'New Mission',\n        description: 'Mission description',\n        agentId: 'karine-ai',\n        complexity: 'invalid-complexity',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/missions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toContain('complexity');\n    });\n\n    it('validates urgency level', async () => {\n      const mockUser = createMockUser();\n\n      // Mock NextAuth session\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValue({\n        user: { id: mockUser.id, email: mockUser.email },\n      });\n\n      // Mock Prisma queries\n      mockPrismaQuery('user', 'findUnique', mockUser);\n\n      const requestBody = {\n        title: 'New Mission',\n        description: 'Mission description',\n        agentId: 'karine-ai',\n        urgency: 'invalid-urgency',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/missions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toContain('urgency');\n    });\n  });\n});\n"],"names":["jest","mock","getServerSession","fn","prisma","mission","findMany","create","findUnique","update","delete","user","describe","beforeEach","clearAllMocks","it","mockUser","createMockUser","mockMissions","createMockMission","id","title","require","mockResolvedValue","email","mockPrismaQuery","request","NextRequest","response","GET","data","json","expect","status","toBe","missions","toHaveLength","mockPrismaError","Error","Array","from","length","_","i","slice","newMission","description","requestBody","agentId","type","complexity","urgency","method","headers","body","JSON","stringify","POST","error","toContain"],"mappings":"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"}