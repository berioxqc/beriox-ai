40a294870912b8aa58392f1d750c9074
"use strict";
// Mock Next.js Image component
jest.mock('next/image', ()=>({
        __esModule: true,
        default: (props)=>{
            // eslint-disable-next-line @next/next/no-img-element
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                ...props,
                alt: props.alt || ''
            });
        }
    }));
// Mock Next.js Link component
jest.mock('next/link', ()=>({
        __esModule: true,
        default: ({ children, href, ...props })=>{
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: href,
                ...props,
                children: children
            });
        }
    }));
// Mock Next.js useRouter
jest.mock('next/router', ()=>({
        useRouter () {
            return {
                route: '/',
                pathname: '/',
                query: {},
                asPath: '/',
                push: jest.fn(),
                pop: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn().mockResolvedValue(undefined),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                },
                isFallback: false
            };
        }
    }));
// Mock Next.js navigation
jest.mock('next/navigation', ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn()
            };
        },
        useSearchParams () {
            return new URLSearchParams();
        },
        usePathname () {
            return '/';
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
// Mock environment variables
process.env.NEXTAUTH_URL = 'http://localhost:3000';
process.env.NEXTAUTH_SECRET = 'test-secret';
process.env.OPENAI_API_KEY = 'test-openai-key';
process.env.STRIPE_SECRET_KEY = 'test-stripe-key';
process.env.STRIPE_WEBHOOK_SECRET = 'test-webhook-secret';
process.env.RESEND_API_KEY = 'test-resend-key';
process.env.REDIS_URL = 'redis://localhost:6379';
process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test';
// Mock console methods to reduce noise in tests
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args)=>{
        if (typeof args[0] === 'string' && (args[0].includes('Warning: componentWillReceiveProps') || args[0].includes('Warning: componentWillUpdate'))) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
    console.warn = originalWarn;
});
// Global test utilities
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.localStorage = localStorageMock;
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;
// Mock fetch
global.fetch = jest.fn();
// Custom matchers
expect.extend({
    toHaveBeenCalledWithMatch (received, expected) {
        const pass = received.mock.calls.some((call)=>{
            try {
                expect(call).toEqual(expect.arrayContaining([
                    expected
                ]));
                return true;
            } catch  {
                return false;
            }
        });
        if (pass) {
            return {
                message: ()=>`expected ${received.getMockName()} not to have been called with ${JSON.stringify(expected)}`,
                pass: true
            };
        } else {
            return {
                message: ()=>`expected ${received.getMockName()} to have been called with ${JSON.stringify(expected)}`,
                pass: false
            };
        }
    }
});
// Test utilities
global.waitForLoadingToFinish = ()=>new Promise((resolve)=>setTimeout(resolve, 0));
global.mockApiResponse = (data, status = 200)=>{
    global.fetch.mockResolvedValueOnce({
        ok: status >= 200 && status < 300,
        status,
        json: async ()=>data,
        text: async ()=>JSON.stringify(data)
    });
};
global.mockApiError = (error, status = 500)=>{
    global.fetch.mockRejectedValueOnce(new Error(error));
};
// Cleanup after each test
afterEach(()=>{
    jest.clearAllMocks();
    jest.clearAllTimers();
});
// Global test timeout
jest.setTimeout(10000);

//# sourceMappingURL=data:application/json;base64,