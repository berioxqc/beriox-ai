// Utilitaire pour l'√©valuation automatique de priorit√© par PriorityBot

export interface PriorityEvaluation {
  priority: 'high' | 'medium' | 'low'
  score: number
  reasoning: string
  factors: {
    urgency: number
    impact: number
    complexity: number
    strategic: number
  }
}

export function evaluatePriority(objective: string, context?: string): PriorityEvaluation {
  const text = `${objective} ${context || ''}`.toLowerCase()
  // Mots-cl√©s pour l'urgence (0-10)
  const urgencyKeywords = {
    high: ['urgent', 'imm√©diat', 'asap', 'rapidement', 'tout de suite', 'deadline', '√©ch√©ance', 'critique', 'bloquant'],
    medium: ['bient√¥t', 'prochainement', 'dans la semaine', 'important', 'n√©cessaire'],
    low: ['plus tard', '√©ventuellement', '√† long terme', 'quand possible', 'optionnel']
  }
  // Mots-cl√©s pour l'impact business (0-10)
  const impactKeywords = {
    high: ['chiffre d\'affaires', 'revenus', 'clients', 'croissance', 'strat√©gique', 'transformation', 'innovation', 'concurrence', 'march√©'],
    medium: ['am√©lioration', 'optimisation', 'efficacit√©', 'qualit√©', 'processus', '√©quipe'],
    low: ['documentation', 'organisation', 'maintenance', 'nettoyage', 'archivage']
  }
  // Mots-cl√©s pour la complexit√© (0-10, invers√© pour le score)
  const complexityKeywords = {
    high: ['d√©veloppement', 'architecture', 'syst√®me', 'int√©gration', 'migration', 'refactoring', 'technique'],
    medium: ['analyse', '√©tude', 'recherche', 'conception', 'design'],
    low: ['simple', 'basique', 'rapide', 'facile', 'direct']
  }
  // Mots-cl√©s strat√©giques (0-10)
  const strategicKeywords = {
    high: ['vision', 'mission', 'objectifs', 'strat√©gie', 'roadmap', 'pivot', 'expansion', 'lancement'],
    medium: ['projet', 'initiative', 'campagne', 'am√©lioration'],
    low: ['t√¢che', 'correction', 'ajustement', 'modification']
  }
  // Calcul des scores
  const urgency = calculateKeywordScore(text, urgencyKeywords)
  const impact = calculateKeywordScore(text, impactKeywords)
  const complexity = 10 - calculateKeywordScore(text, complexityKeywords); // Invers√©
  const strategic = calculateKeywordScore(text, strategicKeywords)
  // Score global pond√©r√©
  const globalScore = (urgency * 0.3) + (impact * 0.4) + (complexity * 0.1) + (strategic * 0.2)
  // D√©termination de la priorit√©
  let priority: 'high' | 'medium' | 'low'
  if (globalScore >= 7) {
    priority = 'high'
  } else if (globalScore >= 4) {
    priority = 'medium'
  } else {
    priority = 'low'
  }

  // G√©n√©ration du raisonnement
  const reasoning = generateReasoning(priority, { urgency, impact, complexity, strategic }, text)
  return {
    priority,
    score: Math.round(globalScore * 10) / 10,
    reasoning,
    factors: {
      urgency: Math.round(urgency * 10) / 10,
      impact: Math.round(impact * 10) / 10,
      complexity: Math.round(complexity * 10) / 10,
      strategic: Math.round(strategic * 10) / 10
    }
  }
}

function calculateKeywordScore(text: string, keywords: { high: string[], medium: string[], low: string[] }): number {
  let score = 0
  keywords.high.forEach(keyword => {
    if (text.includes(keyword)) score += 3
  })
  keywords.medium.forEach(keyword => {
    if (text.includes(keyword)) score += 2
  })
  keywords.low.forEach(keyword => {
    if (text.includes(keyword)) score += 1
  })
  return Math.min(score, 10); // Cap √† 10
}

function generateReasoning(
  priority: 'high' | 'medium' | 'low',
  factors: { urgency: number, impact: number, complexity: number, strategic: number },
  text: string
): string {
  const reasons = []
  // Analyse de l'urgence
  if (factors.urgency >= 7) {
    reasons.push("üî• Urgence √©lev√©e d√©tect√©e")
  } else if (factors.urgency >= 4) {
    reasons.push("‚è∞ Urgence mod√©r√©e")
  } else {
    reasons.push("üìÖ Pas d'urgence particuli√®re")
  }

  // Analyse de l'impact
  if (factors.impact >= 7) {
    reasons.push("üíé Impact business majeur")
  } else if (factors.impact >= 4) {
    reasons.push("üìà Impact business mod√©r√©")
  } else {
    reasons.push("üîß Impact op√©rationnel")
  }

  // Analyse strat√©gique
  if (factors.strategic >= 7) {
    reasons.push("üéØ Enjeu strat√©gique critique")
  } else if (factors.strategic >= 4) {
    reasons.push("üìä Importance tactique")
  }

  // Analyse de la complexit√©
  if (factors.complexity <= 3) {
    reasons.push("‚ö° Complexit√© √©lev√©e identifi√©e")
  } else if (factors.complexity <= 6) {
    reasons.push("üîÑ Complexit√© mod√©r√©e")
  } else {
    reasons.push("‚úÖ Impl√©mentation simple")
  }

  const priorityLabels = {
    high: "HAUTE - Action imm√©diate requise",
    medium: "MOYENNE - Planification n√©cessaire",
    low: "BASSE - √Ä traiter selon disponibilit√©"
  }
  return `PriorityBot recommande une priorit√© ${priorityLabels[priority]}.\n\n${reasons.join(' ‚Ä¢ ')}`
}

// Fonction pour obtenir une √©valuation avec prompt GPT (optionnel, pour cas complexes)
export async function getAIPriorityEvaluation(objective: string, context?: string): Promise<PriorityEvaluation> {
  const prompt = `En tant que PriorityBot, expert en priorisation de missions business, analyse cette mission et d√©termine sa priorit√©.

Mission: ${objective}
${context ? `Contexte: ${context}` : ''}

√âvalue selon ces crit√®res:
1. Urgence (d√©lais, contraintes temporelles)
2. Impact business (revenus, clients, croissance)
3. Complexit√© (ressources, temps, difficult√©s)
4. Valeur strat√©gique (alignement objectifs, innovation)

R√©ponds au format JSON:
{
  "priority": "high|medium|low",
  "score": number (0-10),
  "reasoning": "explication d√©taill√©e",
  "factors": {
    "urgency": number (0-10),
    "impact": number (0-10),
    "complexity": number (0-10),
    "strategic": number (0-10)
  }
}`
  try {
    const response = await fetch('/api/openai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt,
        maxTokens: 500,
        temperature: 0.3
      })
    })
    const data = await response.json()
    return JSON.parse(data.response)
  } catch (error) {
    // Fallback vers l'√©valuation locale
    console.warn('Fallback vers √©valuation locale:', error)
    return evaluatePriority(objective, context)
  }
}
