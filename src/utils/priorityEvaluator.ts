// Utilitaire pour l'apos;√©valuation automatique de priorit√© par PriorityBot

export interface PriorityEvaluation {
  priority: 'apos;high'apos; | 'apos;medium'apos; | 'apos;low'apos;;
  score: number;
  reasoning: string;
  factors: {
    urgency: number;
    impact: number;
    complexity: number;
    strategic: number;
  };
}

export function evaluatePriority(objective: string, context?: string): PriorityEvaluation {
  const text = `${objective} ${context || 'apos;'apos;}`.toLowerCase();
  
  // Mots-cl√©s pour l'apos;urgence (0-10)
  const urgencyKeywords = {
    high: ['apos;urgent'apos;, 'apos;imm√©diat'apos;, 'apos;asap'apos;, 'apos;rapidement'apos;, 'apos;tout de suite'apos;, 'apos;deadline'apos;, 'apos;√©ch√©ance'apos;, 'apos;critique'apos;, 'apos;bloquant'apos;],
    medium: ['apos;bient√¥t'apos;, 'apos;prochainement'apos;, 'apos;dans la semaine'apos;, 'apos;important'apos;, 'apos;n√©cessaire'apos;],
    low: ['apos;plus tard'apos;, 'apos;√©ventuellement'apos;, 'apos;√† long terme'apos;, 'apos;quand possible'apos;, 'apos;optionnel'apos;]
  };

  // Mots-cl√©s pour l'apos;impact business (0-10)
  const impactKeywords = {
    high: ['apos;chiffre d\'apos;affaires'apos;, 'apos;revenus'apos;, 'apos;clients'apos;, 'apos;croissance'apos;, 'apos;strat√©gique'apos;, 'apos;transformation'apos;, 'apos;innovation'apos;, 'apos;concurrence'apos;, 'apos;march√©'apos;],
    medium: ['apos;am√©lioration'apos;, 'apos;optimisation'apos;, 'apos;efficacit√©'apos;, 'apos;qualit√©'apos;, 'apos;processus'apos;, 'apos;√©quipe'apos;],
    low: ['apos;documentation'apos;, 'apos;organisation'apos;, 'apos;maintenance'apos;, 'apos;nettoyage'apos;, 'apos;archivage'apos;]
  };

  // Mots-cl√©s pour la complexit√© (0-10, invers√© pour le score)
  const complexityKeywords = {
    high: ['apos;d√©veloppement'apos;, 'apos;architecture'apos;, 'apos;syst√®me'apos;, 'apos;int√©gration'apos;, 'apos;migration'apos;, 'apos;refactoring'apos;, 'apos;technique'apos;],
    medium: ['apos;analyse'apos;, 'apos;√©tude'apos;, 'apos;recherche'apos;, 'apos;conception'apos;, 'apos;design'apos;],
    low: ['apos;simple'apos;, 'apos;basique'apos;, 'apos;rapide'apos;, 'apos;facile'apos;, 'apos;direct'apos;]
  };

  // Mots-cl√©s strat√©giques (0-10)
  const strategicKeywords = {
    high: ['apos;vision'apos;, 'apos;mission'apos;, 'apos;objectifs'apos;, 'apos;strat√©gie'apos;, 'apos;roadmap'apos;, 'apos;pivot'apos;, 'apos;expansion'apos;, 'apos;lancement'apos;],
    medium: ['apos;projet'apos;, 'apos;initiative'apos;, 'apos;campagne'apos;, 'apos;am√©lioration'apos;],
    low: ['apos;t√¢che'apos;, 'apos;correction'apos;, 'apos;ajustement'apos;, 'apos;modification'apos;]
  };

  // Calcul des scores
  const urgency = calculateKeywordScore(text, urgencyKeywords);
  const impact = calculateKeywordScore(text, impactKeywords);
  const complexity = 10 - calculateKeywordScore(text, complexityKeywords); // Invers√©
  const strategic = calculateKeywordScore(text, strategicKeywords);

  // Score global pond√©r√©
  const globalScore = (urgency * 0.3) + (impact * 0.4) + (complexity * 0.1) + (strategic * 0.2);

  // D√©termination de la priorit√©
  let priority: 'apos;high'apos; | 'apos;medium'apos; | 'apos;low'apos;;
  if (globalScore >= 7) {
    priority = 'apos;high'apos;;
  } else if (globalScore >= 4) {
    priority = 'apos;medium'apos;;
  } else {
    priority = 'apos;low'apos;;
  }

  // G√©n√©ration du raisonnement
  const reasoning = generateReasoning(priority, { urgency, impact, complexity, strategic }, text);

  return {
    priority,
    score: Math.round(globalScore * 10) / 10,
    reasoning,
    factors: {
      urgency: Math.round(urgency * 10) / 10,
      impact: Math.round(impact * 10) / 10,
      complexity: Math.round(complexity * 10) / 10,
      strategic: Math.round(strategic * 10) / 10
    }
  };
}

function calculateKeywordScore(text: string, keywords: { high: string[], medium: string[], low: string[] }): number {
  let score = 0;
  
  keywords.high.forEach(keyword => {
    if (text.includes(keyword)) score += 3;
  });
  
  keywords.medium.forEach(keyword => {
    if (text.includes(keyword)) score += 2;
  });
  
  keywords.low.forEach(keyword => {
    if (text.includes(keyword)) score += 1;
  });

  return Math.min(score, 10); // Cap √† 10
}

function generateReasoning(
  priority: 'apos;high'apos; | 'apos;medium'apos; | 'apos;low'apos;,
  factors: { urgency: number, impact: number, complexity: number, strategic: number },
  text: string
): string {
  const reasons = [];

  // Analyse de l'apos;urgence
  if (factors.urgency >= 7) {
    reasons.push("üî• Urgence √©lev√©e d√©tect√©e");
  } else if (factors.urgency >= 4) {
    reasons.push("‚è∞ Urgence mod√©r√©e");
  } else {
    reasons.push("üìÖ Pas d'apos;urgence particuli√®re");
  }

  // Analyse de l'apos;impact
  if (factors.impact >= 7) {
    reasons.push("üíé Impact business majeur");
  } else if (factors.impact >= 4) {
    reasons.push("üìà Impact business mod√©r√©");
  } else {
    reasons.push("üîß Impact op√©rationnel");
  }

  // Analyse strat√©gique
  if (factors.strategic >= 7) {
    reasons.push("üéØ Enjeu strat√©gique critique");
  } else if (factors.strategic >= 4) {
    reasons.push("üìä Importance tactique");
  }

  // Analyse de la complexit√©
  if (factors.complexity <= 3) {
    reasons.push("‚ö° Complexit√© √©lev√©e identifi√©e");
  } else if (factors.complexity <= 6) {
    reasons.push("üîÑ Complexit√© mod√©r√©e");
  } else {
    reasons.push("‚úÖ Impl√©mentation simple");
  }

  const priorityLabels = {
    high: "HAUTE - Action imm√©diate requise",
    medium: "MOYENNE - Planification n√©cessaire",
    low: "BASSE - √Ä traiter selon disponibilit√©"
  };

  return `PriorityBot recommande une priorit√© ${priorityLabels[priority]}.\n\n${reasons.join('apos; ‚Ä¢ 'apos;)}`;
}

// Fonction pour obtenir une √©valuation avec prompt GPT (optionnel, pour cas complexes)
export async function getAIPriorityEvaluation(objective: string, context?: string): Promise<PriorityEvaluation> {
  const prompt = `En tant que PriorityBot, expert en priorisation de missions business, analyse cette mission et d√©termine sa priorit√©.

Mission: ${objective}
${context ? `Contexte: ${context}` : 'apos;'apos;}

√âvalue selon ces crit√®res:
1. Urgence (d√©lais, contraintes temporelles)
2. Impact business (revenus, clients, croissance)
3. Complexit√© (ressources, temps, difficult√©s)
4. Valeur strat√©gique (alignement objectifs, innovation)

R√©ponds au format JSON:
{
  "priority": "high|medium|low",
  "score": number (0-10),
  "reasoning": "explication d√©taill√©e",
  "factors": {
    "urgency": number (0-10),
    "impact": number (0-10),
    "complexity": number (0-10),
    "strategic": number (0-10)
  }
}`;

  try {
    const response = await fetch('apos;/api/openai'apos;, {
      method: 'apos;POST'apos;,
      headers: {
        'apos;Content-Type'apos;: 'apos;application/json'apos;,
      },
      body: JSON.stringify({
        prompt,
        maxTokens: 500,
        temperature: 0.3
      })
    });

    const data = await response.json();
    return JSON.parse(data.response);
  } catch (error) {
    // Fallback vers l'apos;√©valuation locale
    console.warn('apos;Fallback vers √©valuation locale:'apos;, error);
    return evaluatePriority(objective, context);
  }
}
