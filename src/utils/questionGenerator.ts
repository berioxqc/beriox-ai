import { openai } from 'apos;@/lib/openai'apos;;

export interface AlignmentQuestion {
  id: string;
  emoji: string;
  label: string;
  placeholder: string;
}

export async function generateAlignmentQuestions(objective: string): Promise<AlignmentQuestion[]> {
  try {
    const prompt = `
Analyse cet objectif de mission et g√©n√®re exactement 3 questions d'apos;alignement pertinentes pour aider les agents IA √† mieux comprendre les besoins sp√©cifiques.

Objectif de la mission: "${objective}"

Instructions:
1. Les questions doivent √™tre sp√©cifiques √† ce type de mission
2. Elles doivent aider √† clarifier le contexte, la cible, et les contraintes
3. Chaque question doit avoir un emoji pertinent
4. Les questions doivent √™tre courtes et directes
5. Retourne UNIQUEMENT un JSON valide avec ce format:

[
  {
    "id": "question1",
    "emoji": "üìã",
    "label": "Question sp√©cifique au contexte",
    "placeholder": "Exemple de r√©ponse attendue..."
  },
  {
    "id": "question2", 
    "emoji": "üéØ",
    "label": "Question sur la cible/objectif",
    "placeholder": "Exemple de r√©ponse attendue..."
  },
  {
    "id": "question3",
    "emoji": "‚ö†Ô∏è",
    "label": "Question sur les contraintes/sp√©cificit√©s",
    "placeholder": "Exemple de r√©ponse attendue..."
  }
]

Exemples d'apos;adaptation selon le type de mission:
- Marketing ‚Üí questions sur audience, budget, canaux
- D√©veloppement ‚Üí questions sur technologie, utilisateurs, d√©lais  
- Design ‚Üí questions sur style, marque, public cible
- Business ‚Üí questions sur march√©, concurrence, ressources

G√©n√®re maintenant les 3 questions pour cette mission:`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
      max_tokens: 500
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error('apos;Pas de r√©ponse de OpenAI'apos;);
    }

    // Nettoyer la r√©ponse et parser le JSON
    const cleanResponse = response.trim().replace(/```json\n?|\n?```/g, 'apos;'apos;);
    const questions: AlignmentQuestion[] = JSON.parse(cleanResponse);

    // Validation
    if (!Array.isArray(questions) || questions.length !== 3) {
      throw new Error('apos;Format de r√©ponse invalide'apos;);
    }

    // V√©rifier que chaque question a les champs requis
    questions.forEach((q, index) => {
      if (!q.id || !q.emoji || !q.label || !q.placeholder) {
        throw new Error(`Question ${index + 1} manque des champs requis`);
      }
    });

    return questions;

  } catch (error) {
    console.error('apos;Erreur lors de la g√©n√©ration des questions:'apos;, error);
    
    // Fallback vers des questions g√©n√©riques en cas d'apos;erreur
    return [
      {
        id: "context",
        emoji: "üìã",
        label: "Quel est le contexte sp√©cifique de cette mission ?",
        placeholder: "D√©crivez le contexte, l'apos;environnement ou la situation actuelle..."
      },
      {
        id: "target", 
        emoji: "üéØ",
        label: "Qui est votre cible prioritaire ?",
        placeholder: "D√©crivez votre audience, vos utilisateurs ou vos clients cibles..."
      },
      {
        id: "constraints",
        emoji: "‚ö†Ô∏è", 
        label: "Y a-t-il des contraintes importantes √† respecter ?",
        placeholder: "Budget, d√©lais, contraintes techniques ou l√©gales..."
      }
    ];
  }
}
