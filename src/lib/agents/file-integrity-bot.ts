// üîç Bot de V√©rification d'Int√©grit√© des Fichiers - Beriox AI
// D√©tecte et corrige automatiquement les fichiers corrompus

import fs from 'fs'
import path from 'path'
import { logger } from '@/lib/logger'
export interface FileIntegrityIssue {
  filePath: string
  issueType: 'corrupted' | 'syntax_error' | 'missing_import' | 'invalid_encoding'
  description: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  lineNumber?: number
  columnNumber?: number
  suggestedFix?: string
}

export interface FileIntegrityReport {
  totalFiles: number
  corruptedFiles: number
  issues: FileIntegrityIssue[]
  summary: {
    critical: number
    high: number
    medium: number
    low: number
  }
  recommendations: string[]
}

export class FileIntegrityBot {
  private readonly srcDir = path.join(process.cwd(), 'src')
  private readonly fileExtensions = ['.ts', '.tsx', '.js', '.jsx']
  private readonly corruptedPatterns = [
    /'/g, // Apostrophes mal √©chapp√©es
    /'/g, // Double √©chappement
    /import.*'/g, // Imports corrompus
    /from.*'/g, // From corrompus
  ]
  /**
   * Analyse l'int√©grit√© de tous les fichiers du projet
   */
  async analyzeProjectIntegrity(): Promise<FileIntegrityReport> {
    logger.info('üîç D√©marrage de l\'analyse d\'int√©grit√© des fichiers...')
    const issues: FileIntegrityIssue[] = []
    const files = this.getAllSourceFiles()
    for (const filePath of files) {
      const fileIssues = await this.analyzeFileIntegrity(filePath)
      issues.push(...fileIssues)
    }
    
    const report = this.generateReport(files.length, issues)
    await this.logReport(report)
    return report
  }

  /**
   * Analyse l'int√©grit√© d'un fichier sp√©cifique
   */
  async analyzeFileIntegrity(filePath: string): Promise<FileIntegrityIssue[]> {
    const issues: FileIntegrityIssue[] = []
    try {
      const content = fs.readFileSync(filePath, 'utf8')
      // V√©rifier les patterns de corruption
      for (const pattern of this.corruptedPatterns) {
        const matches = content.match(pattern)
        if (matches) {
          issues.push({
            filePath,
            issueType: 'corrupted',
            description: `Pattern de corruption d√©tect√©: ${pattern.source}`,
            severity: 'critical',
            suggestedFix: 'Restaurer le fichier depuis Git ou corriger manuellement'
          })
        }
      }
      
      // V√©rifier la syntaxe TypeScript/JavaScript
      const syntaxIssues = this.checkSyntaxIntegrity(content, filePath)
      issues.push(...syntaxIssues)
      // V√©rifier les imports
      const importIssues = this.checkImportIntegrity(content, filePath)
      issues.push(...importIssues)
    } catch (error) {
      issues.push({
        filePath,
        issueType: 'corrupted',
        description: `Impossible de lire le fichier: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
        severity: 'critical',
        suggestedFix: 'V√©rifier les permissions ou restaurer depuis Git'
      })
    }
    
    return issues
  }

  /**
   * V√©rifie l'int√©grit√© de la syntaxe
   */
  private checkSyntaxIntegrity(content: string, filePath: string): FileIntegrityIssue[] {
    const issues: FileIntegrityIssue[] = []
    // V√©rifier les guillemets non ferm√©s
    const lines = content.split('\n')
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      const singleQuotes = (line.match(/'/g) || []).length
      const doubleQuotes = (line.match(/"/g) || []).length
      if (singleQuotes % 2 !== 0) {
        issues.push({
          filePath,
          issueType: 'syntax_error',
          description: `Guillemets simples non ferm√©s √† la ligne ${i + 1}`,
          severity: 'high',
          lineNumber: i + 1,
          suggestedFix: 'Fermer les guillemets ou √©chapper correctement'
        })
      }
      
      if (doubleQuotes % 2 !== 0) {
        issues.push({
          filePath,
          issueType: 'syntax_error',
          description: `Guillemets doubles non ferm√©s √† la ligne ${i + 1}`,
          severity: 'high',
          lineNumber: i + 1,
          suggestedFix: 'Fermer les guillemets ou √©chapper correctement'
        })
      }
    }
    
    return issues
  }

  /**
   * V√©rifie l'int√©grit√© des imports
   */
  private checkImportIntegrity(content: string, filePath: string): FileIntegrityIssue[] {
    const issues: FileIntegrityIssue[] = []
    // V√©rifier les imports corrompus
    const importLines = content.match(/import.*from.*['"][^'"]*['"]/g) || []
    for (const importLine of importLines) {
      if (importLine.includes('')) {
        issues.push({
          filePath,
          issueType: 'missing_import',
          description: `Import corrompu: ${importLine.trim()}`,
          severity: 'critical',
          suggestedFix: 'Corriger l\'import en rempla√ßant les apostrophes corrompues'
        })
      }
    }
    
    return issues
  }

  /**
   * Corrige automatiquement les fichiers corrompus
   */
  async fixCorruptedFiles(report: FileIntegrityReport): Promise<{ fixed: number; failed: number }> {
    logger.info('üîß D√©marrage de la correction automatique des fichiers corrompus...')
    let fixed = 0
    let failed = 0
    for (const issue of report.issues) {
      if (issue.severity === 'critical' && issue.issueType === 'corrupted') {
        try {
          const success = await this.fixCorruptedFile(issue.filePath)
          if (success) {
            fixed++
            logger.info(`‚úÖ Fichier corrig√©: ${issue.filePath}`)
          } else {
            failed++
            logger.error(`‚ùå √âchec de correction: ${issue.filePath}`)
          }
        } catch (error) {
          failed++
          logger.error(`‚ùå Erreur lors de la correction de ${issue.filePath}:`, error)
        }
      }
    }
    
    logger.info(`üîß Correction termin√©e: ${fixed} fichiers corrig√©s, ${failed} √©checs`)
    return { fixed, failed }
  }

  /**
   * Corrige un fichier corrompu sp√©cifique
   */
  private async fixCorruptedFile(filePath: string): Promise<boolean> {
    try {
      // Essayer de restaurer depuis Git
      const { execSync } = require('child_process')
      execSync(`git checkout HEAD -- "${filePath}"`, { stdio: 'pipe' })
      return true
    } catch (error) {
      // Si la restauration Git √©choue, essayer une correction manuelle
      return this.manualFixCorruptedFile(filePath)
    }
  }

  /**
   * Correction manuelle d'un fichier corrompu
   */
  private async manualFixCorruptedFile(filePath: string): Promise<boolean> {
    try {
      let content = fs.readFileSync(filePath, 'utf8')
      // Corriger les apostrophes corrompues
      content = content.replace(/'/g, "'")
      content = content.replace(/'/g, "'")
      // Corriger les imports
      content = content.replace(/import\s+.*\s+from\s+['"]apos;([^'"]+)apos;['"]/g, "import $1 from '$1'")
      content = content.replace(/from\s+['"]apos;([^'"]+)apos;['"]/g, "from '$1'")
      // √âcrire le fichier corrig√©
      fs.writeFileSync(filePath, content, 'utf8')
      return true
    } catch (error) {
      logger.error(`Erreur lors de la correction manuelle de ${filePath}:`, error)
      return false
    }
  }

  /**
   * G√©n√®re un rapport d'int√©grit√©
   */
  private generateReport(totalFiles: number, issues: FileIntegrityIssue[]): FileIntegrityReport {
    const corruptedFiles = new Set(issues.map(issue => issue.filePath)).size
    const summary = {
      critical: issues.filter(i => i.severity === 'critical').length,
      high: issues.filter(i => i.severity === 'high').length,
      medium: issues.filter(i => i.severity === 'medium').length,
      low: issues.filter(i => i.severity === 'low').length,
    }
    const recommendations = this.generateRecommendations(issues, summary)
    return {
      totalFiles,
      corruptedFiles,
      issues,
      summary,
      recommendations
    }
  }

  /**
   * G√©n√®re des recommandations bas√©es sur les probl√®mes d√©tect√©s
   */
  private generateRecommendations(issues: FileIntegrityIssue[], summary: any): string[] {
    const recommendations: string[] = []
    if (summary.critical > 0) {
      recommendations.push('üö® Fichiers critiques d√©tect√©s - Restauration Git recommand√©e')
      recommendations.push('üí° Ex√©cuter: git checkout HEAD -- <fichier_corrompu>')
    }
    
    if (summary.high > 0) {
      recommendations.push('‚ö†Ô∏è Erreurs de syntaxe d√©tect√©es - V√©rification manuelle requise')
      recommendations.push('üí° Utiliser: npm run lint pour identifier les probl√®mes')
    }
    
    if (issues.some(i => i.issueType === 'corrupted')) {
      recommendations.push('üîß Script de correction automatique disponible')
      recommendations.push('üí° Ex√©cuter: npm run fix:integrity')
    }
    
    if (summary.critical === 0 && summary.high === 0) {
      recommendations.push('‚úÖ Aucun probl√®me critique d√©tect√© - Int√©grit√© des fichiers OK')
    }
    
    return recommendations
  }

  /**
   * Enregistre le rapport dans les logs
   */
  private async logReport(report: FileIntegrityReport): Promise<void> {
    logger.info('üìä RAPPORT D\'INT√âGRIT√â DES FICHIERS')
    logger.info(`üìÅ Fichiers analys√©s: ${report.totalFiles}`)
    logger.info(`üö® Fichiers corrompus: ${report.corruptedFiles}`)
    logger.info(`üìà R√©sum√©: ${report.summary.critical} critique, ${report.summary.high} √©lev√©, ${report.summary.medium} moyen, ${report.summary.low} faible`)
    if (report.issues.length > 0) {
      logger.info('üîç Probl√®mes d√©tect√©s:')
      report.issues.forEach(issue => {
        logger.info(`  ${issue.severity.toUpperCase()}: ${issue.filePath} - ${issue.description}`)
      })
    }
    
    logger.info('üí° Recommandations:')
    report.recommendations.forEach(rec => {
      logger.info(`  ${rec}`)
    })
  }

  /**
   * R√©cup√®re tous les fichiers source du projet
   */
  private getAllSourceFiles(): string[] {
    const files: string[] = []
    const walkDir = (dir: string) => {
      const items = fs.readdirSync(dir)
      for (const item of items) {
        const fullPath = path.join(dir, item)
        const stat = fs.statSync(fullPath)
        if (stat.isDirectory()) {
          walkDir(fullPath)
        } else if (this.fileExtensions.includes(path.extname(item))) {
          files.push(fullPath)
        }
      }
    }
    if (fs.existsSync(this.srcDir)) {
      walkDir(this.srcDir)
    }
    
    return files
  }

  /**
   * V√©rifie l'int√©grit√© en temps r√©el (pour le monitoring)
   */
  async monitorIntegrity(): Promise<void> {
    const report = await this.analyzeProjectIntegrity()
    if (report.summary.critical > 0) {
      logger.error('üö® PROBL√àMES CRITIQUES D√âTECT√âS - Action imm√©diate requise')
      await this.fixCorruptedFiles(report)
    } else if (report.summary.high > 0) {
      logger.warn('‚ö†Ô∏è Probl√®mes d\'int√©grit√© d√©tect√©s - V√©rification recommand√©e')
    } else {
      logger.info('‚úÖ Int√©grit√© des fichiers v√©rifi√©e - Aucun probl√®me d√©tect√©')
    }
  }
}

// Instance singleton
export const fileIntegrityBot = new FileIntegrityBot()
// Fonction d'export pour utilisation directe
export async function checkFileIntegrity(): Promise<FileIntegrityReport> {
  return await fileIntegrityBot.analyzeProjectIntegrity()
}

export async function fixCorruptedFiles(): Promise<{ fixed: number; failed: number }> {
  const report = await fileIntegrityBot.analyzeProjectIntegrity()
  return await fileIntegrityBot.fixCorruptedFiles(report)
}

export async function monitorFileIntegrity(): Promise<void> {
  await fileIntegrityBot.monitorIntegrity()
}
