import React from 'react'

// üé® Syst√®me d'Ic√¥nes S√©curis√© - Beriox AI
// √âvite les probl√®mes d'encodage et de corruption

export interface SafeIcon {
  name: string
  unicode: string
  fallback: string
  category: 'status' | 'action' | 'navigation' | 'feedback' | 'system'
}

// Ic√¥nes s√©curis√©es avec fallbacks
export const SAFE_ICONS: Record<string, SafeIcon> = {
  // Status
  success: {
    name: 'success',
    unicode: '‚úì',
    fallback: '[OK]',
    category: 'status'
  },
  error: {
    name: 'error',
    unicode: '‚úó',
    fallback: '[ERREUR]',
    category: 'status'
  },
  warning: {
    name: 'warning',
    unicode: '‚ö†',
    fallback: '[ATTENTION]',
    category: 'status'
  },
  info: {
    name: 'info',
    unicode: '‚Ñπ',
    fallback: '[INFO]',
    category: 'status'
  },
  loading: {
    name: 'loading',
    unicode: '‚ü≥',
    fallback: '[CHARGEMENT]',
    category: 'status'
  },
  
  // Actions
  add: {
    name: 'add',
    unicode: '+',
    fallback: '[AJOUTER]',
    category: 'action'
  },
  remove: {
    name: 'remove',
    unicode: '‚àí',
    fallback: '[SUPPRIMER]',
    category: 'action'
  },
  edit: {
    name: 'edit',
    unicode: '‚úé',
    fallback: '[MODIFIER]',
    category: 'action'
  },
  delete: {
    name: 'delete',
    unicode: 'üóë',
    fallback: '[SUPPRIMER]',
    category: 'action'
  },
  save: {
    name: 'save',
    unicode: 'üíæ',
    fallback: '[SAUVEGARDER]',
    category: 'action'
  },
  search: {
    name: 'search',
    unicode: 'üîç',
    fallback: '[RECHERCHER]',
    category: 'action'
  },
  filter: {
    name: 'filter',
    unicode: 'üîß',
    fallback: '[FILTRER]',
    category: 'action'
  },
  
  // Navigation
  home: {
    name: 'home',
    unicode: 'üè†',
    fallback: '[ACCUEIL]',
    category: 'navigation'
  },
  back: {
    name: 'back',
    unicode: '‚Üê',
    fallback: '[RETOUR]',
    category: 'navigation'
  },
  forward: {
    name: 'forward',
    unicode: '‚Üí',
    fallback: '[SUIVANT]',
    category: 'navigation'
  },
  up: {
    name: 'up',
    unicode: '‚Üë',
    fallback: '[HAUT]',
    category: 'navigation'
  },
  down: {
    name: 'down',
    unicode: '‚Üì',
    fallback: '[BAS]',
    category: 'navigation'
  },
  menu: {
    name: 'menu',
    unicode: '‚ò∞',
    fallback: '[MENU]',
    category: 'navigation'
  },
  close: {
    name: 'close',
    unicode: '‚úï',
    fallback: '[FERMER]',
    category: 'navigation'
  },
  
  // Feedback
  like: {
    name: 'like',
    unicode: 'üëç',
    fallback: '[J\'AIME]',
    category: 'feedback'
  },
  dislike: {
    name: 'dislike',
    unicode: 'üëé',
    fallback: '[J\'AIME PAS]',
    category: 'feedback'
  },
  star: {
    name: 'star',
    unicode: '‚òÖ',
    fallback: '[√âTOILE]',
    category: 'feedback'
  },
  heart: {
    name: 'heart',
    unicode: '‚ù§',
    fallback: '[C≈íUR]',
    category: 'feedback'
  },
  
  // System
  settings: {
    name: 'settings',
    unicode: '‚öô',
    fallback: '[PARAM√àTRES]',
    category: 'system'
  },
  user: {
    name: 'user',
    unicode: 'üë§',
    fallback: '[UTILISATEUR]',
    category: 'system'
  },
  lock: {
    name: 'lock',
    unicode: 'üîí',
    fallback: '[VERROUILL√â]',
    category: 'system'
  },
  unlock: {
    name: 'unlock',
    unicode: 'üîì',
    fallback: '[D√âVERROUILL√â]',
    category: 'system'
  },
  refresh: {
    name: 'refresh',
    unicode: 'üîÑ',
    fallback: '[ACTUALISER]',
    category: 'system'
  },
  download: {
    name: 'download',
    unicode: '‚¨á',
    fallback: '[T√âL√âCHARGER]',
    category: 'system'
  },
  upload: {
    name: 'upload',
    unicode: '‚¨Ü',
    fallback: '[T√âL√âVERSER]',
    category: 'system'
  },
  calendar: {
    name: 'calendar',
    unicode: 'üìÖ',
    fallback: '[CALENDRIER]',
    category: 'system'
  },
  clock: {
    name: 'clock',
    unicode: 'üïê',
    fallback: '[HORLOGE]',
    category: 'system'
  },
  email: {
    name: 'email',
    unicode: '‚úâ',
    fallback: '[EMAIL]',
    category: 'system'
  },
  phone: {
    name: 'phone',
    unicode: 'üìû',
    fallback: '[T√âL√âPHONE]',
    category: 'system'
  },
  link: {
    name: 'link',
    unicode: 'üîó',
    fallback: '[LIEN]',
    category: 'system'
  },
  copy: {
    name: 'copy',
    unicode: 'üìã',
    fallback: '[COPIER]',
    category: 'system'
  },
  paste: {
    name: 'paste',
    unicode: 'üìÑ',
    fallback: '[COLLER]',
    category: 'system'
  },
  cut: {
    name: 'cut',
    unicode: '‚úÇ',
    fallback: '[COUPER]',
    category: 'system'
  },
  undo: {
    name: 'undo',
    unicode: '‚Ü∂',
    fallback: '[ANNULER]',
    category: 'system'
  },
  redo: {
    name: 'redo',
    unicode: '‚Ü∑',
    fallback: '[R√âP√âTER]',
    category: 'system'
  },
  zoomIn: {
    name: 'zoomIn',
    unicode: 'üîç+',
    fallback: '[ZOOM +]',
    category: 'system'
  },
  zoomOut: {
    name: 'zoomOut',
    unicode: 'üîç-',
    fallback: '[ZOOM -]',
    category: 'system'
  },
  fullscreen: {
    name: 'fullscreen',
    unicode: '‚õ∂',
    fallback: '[PLEIN √âCRAN]',
    category: 'system'
  },
  minimize: {
    name: 'minimize',
    unicode: 'üóï',
    fallback: '[R√âDUIRE]',
    category: 'system'
  },
  maximize: {
    name: 'maximize',
    unicode: 'üóó',
    fallback: '[AGRANDIR]',
    category: 'system'
  }
}
export class SafeIconManager {
  private useUnicode: boolean = true
  private fallbackMode: boolean = false
  constructor(options?: { useUnicode?: boolean; fallbackMode?: boolean }) {
    this.useUnicode = options?.useUnicode ?? true
    this.fallbackMode = options?.fallbackMode ?? false
  }

  /**
   * Obtient une ic√¥ne s√©curis√©e
   */
  getIcon(iconName: string): string {
    const icon = SAFE_ICONS[iconName]
    if (!icon) {
      return this.fallbackMode ? '[IC√îNE MANQUANTE]' : '?'
    }

    return this.fallbackMode ? icon.fallback : icon.unicode
  }

  /**
   * Obtient une ic√¥ne avec fallback automatique
   */
  getIconWithFallback(iconName: string): string {
    const icon = SAFE_ICONS[iconName]
    if (!icon) {
      return '[IC√îNE MANQUANTE]'
    }

    try {
      // Tester si l'unicode s'affiche correctement
      const testElement = document.createElement('span')
      testElement.textContent = icon.unicode
      const computedStyle = window.getComputedStyle(testElement)
      // Si l'unicode ne s'affiche pas (largeur = 0), utiliser le fallback
      if (computedStyle.width === '0px' || computedStyle.width === '0') {
        return icon.fallback
      }
      
      return icon.unicode
    } catch (error) {
      // En cas d'erreur (SSR, etc.), utiliser le fallback
      return icon.fallback
    }
  }

  /**
   * Obtient toutes les ic√¥nes d'une cat√©gorie
   */
  getIconsByCategory(category: SafeIcon['category']): SafeIcon[] {
    return Object.values(SAFE_ICONS).filter(icon => icon.category === category)
  }

  /**
   * V√©rifie si une ic√¥ne existe
   */
  hasIcon(iconName: string): boolean {
    return iconName in SAFE_ICONS
  }

  /**
   * Active le mode fallback
   */
  enableFallbackMode(): void {
    this.fallbackMode = true
  }

  /**
   * D√©sactive le mode fallback
   */
  disableFallbackMode(): void {
    this.fallbackMode = false
  }

  /**
   * Obtient la liste de toutes les ic√¥nes disponibles
   */
  getAllIcons(): SafeIcon[] {
    return Object.values(SAFE_ICONS)
  }

  /**
   * Recherche des ic√¥nes par nom
   */
  searchIcons(query: string): SafeIcon[] {
    const lowerQuery = query.toLowerCase()
    return Object.values(SAFE_ICONS).filter(icon => 
      icon.name.toLowerCase().includes(lowerQuery) ||
      icon.fallback.toLowerCase().includes(lowerQuery)
    )
  }
}

// Instance singleton
export const safeIconManager = new SafeIconManager()
// Fonctions utilitaires
export function getSafeIcon(iconName: string): string {
  return safeIconManager.getIcon(iconName)
}

export function getSafeIconWithFallback(iconName: string): string {
  return safeIconManager.getIconWithFallback(iconName)
}

export function hasSafeIcon(iconName: string): boolean {
  return safeIconManager.hasIcon(iconName)
}

// Hook React pour les ic√¥nes s√©curis√©es
export function useSafeIcon(iconName: string): string {
  const [icon, setIcon] = React.useState<string>('')
  React.useEffect(() => {
    setIcon(safeIconManager.getIconWithFallback(iconName))
  }, [iconName])
  return icon
}

// Composant React pour les ic√¥nes s√©curis√©es
export const SafeIcon: React.FC<{
  name: string
  className?: string
  size?: 'sm' | 'md' | 'lg'
  fallback?: boolean
}> = ({ name, className = '', size = 'md', fallback = false }) => {
  const iconText = fallback 
    ? safeIconManager.getIcon(name)
    : safeIconManager.getIconWithFallback(name)
  const sizeClasses = {
    sm: 'text-sm',
    md: 'text-base',
    lg: 'text-lg'
  }
  return (
    <span 
      className={`inline-block ${sizeClasses[size]} ${className}`}
      role="img"
      aria-label={SAFE_ICONS[name]?.fallback || name}
    >
      {iconText}
    </span>
  )
}