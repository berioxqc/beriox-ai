"use client";
import { useEffect, useState } from "react";
import Layout from "@/components/Layout";
import AuthGuard from "@/components/AuthGuard";
import { useFreeTrial } from "@/hooks/useFreeTrial";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useTheme, useStyles } from "@/hooks/useTheme";
import Link from "next/link";

type Mission = {
  id: string;
  objective: string;
  status: string;
  createdAt: string;
  deadline?: string | null;
  priority?: string | null;
  notionPageId?: string | null;
};

export default function Home() {
  const [missions, setMissions] = useState<Mission[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [prompt, setPrompt] = useState("");
  const [missionDetails, setMissionDetails] = useState("");
  const [creating, setCreating] = useState(false);
  const [listening, setListening] = useState(false);
  const [priorityEvaluation, setPriorityEvaluation] = useState<any>(null);
  const [showPriorityPreview, setShowPriorityPreview] = useState(false);
  const [selectedAgents, setSelectedAgents] = useState<string[]>([]);
  const [showAgentSelector, setShowAgentSelector] = useState(false);
  const [showAlignmentQuestions, setShowAlignmentQuestions] = useState(false);
  const [alignmentAnswers, setAlignmentAnswers] = useState({
    context: '',
    target: '',
    constraints: ''
  });
  const [personalizedQuestions, setPersonalizedQuestions] = useState([
    {
      label: "üìã Quel est le contexte sp√©cifique de cette mission ?",
      placeholder: "Ex: Lancement d'un nouveau produit, refonte de site, campagne saisonni√®re..."
    },
    {
      label: "üéØ Qui est votre cible prioritaire ?",
      placeholder: "Ex: PME tech, millennials urbains, entrepreneurs d√©butants..."
    },
    {
      label: "‚ö†Ô∏è Y a-t-il des contraintes importantes √† respecter ?",
      placeholder: "Ex: Budget limit√©, d√©lai serr√©, conformit√© RGPD, marque √©tablie..."
    }
  ]);
  const [loadingQuestions, setLoadingQuestions] = useState(false);

  const { useTrial, trialsLeft, isAuthenticated } = useFreeTrial();
  const theme = useTheme();
  const styles = useStyles();

  // D√©finition des agents disponibles
  const availableAgents = [
    { id: "karine", name: "KarineAI", icon: "bullseye", role: "Strat√®ge Marketing", color: theme.colors.primary.main },
    { id: "hugo", name: "HugoAI", icon: "palette", role: "Cr√©atif & Designer", color: theme.colors.success },
    { id: "jpbot", name: "JPBot", icon: "chart-line", role: "Analyste Data", color: theme.colors.info },
    { id: "elodie", name: "ElodieAI", icon: "pen", role: "R√©dactrice & Content", color: theme.colors.warning },
    { id: "clara", name: "ClaraLaCloseuse", icon: "dollar-sign", role: "Experte Conversion", color: theme.colors.error },
    { id: "faucon", name: "FauconLeMaitreFocus", icon: "eye", role: "Coach Productivit√©", color: theme.colors.neutral[500] }
  ];

  // Initialiser la s√©lection avec les agents actifs
  useEffect(() => {
    try {
      const savedAgents = localStorage.getItem('agents-config');
      if (savedAgents) {
        const agentsConfig = JSON.parse(savedAgents);
        const activeAgentNames = agentsConfig
          .filter((agent: any) => agent.active && agent.id !== 'prioritybot')
          .map((agent: any) => agent.name);
        setSelectedAgents(activeAgentNames);
      } else {
        // Configuration par d√©faut
        setSelectedAgents(["KarineAI", "HugoAI", "JPBot", "ElodieAI"]);
      }
    } catch (error) {
      setSelectedAgents(["KarineAI", "HugoAI", "JPBot", "ElodieAI"]);
    }
  }, []);

  async function fetchMissions() {
    try {
      setLoading(true);
      const res = await fetch("/api/missions");
      const json = await res.json();
      setMissions(json.missions || []);
    } catch (e: any) {
      setError(e?.message || "Erreur de chargement");
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    fetchMissions();
  }, []);

  async function previewPriority() {
    if (!prompt.trim()) return;
    
    try {
      // Import dynamique pour √©viter les erreurs SSR
      const { evaluatePriority } = await import("@/utils/priorityEvaluator");
      const evaluation = evaluatePriority(prompt);
      setPriorityEvaluation(evaluation);
      setShowPriorityPreview(true);
    } catch (e: any) {
      console.error("Erreur √©valuation priorit√©:", e);
    }
  }

  function generatePreviewBriefs(objective: string, agents: string[], alignment?: any) {
    const contextSection = alignment?.context ? `\n**üìã Contexte sp√©cifique:**\n${alignment.context}\n` : '';
    const targetSection = alignment?.target ? `\n**üéØ Cible prioritaire:**\n${alignment.target}\n` : '';
    const constraintsSection = alignment?.constraints ? `\n**‚ö†Ô∏è Contraintes importantes:**\n${alignment.constraints}\n` : '';

    const briefTemplates: Record<string, string> = {
      "KarineAI": `**Mission:** ${objective}${contextSection}${targetSection}${constraintsSection}

Salut mon petit m√©thodique ! üòä Voici ce que j'ai pr√©par√© pour toi avec mon sourire habituel.

**Tes objectifs:**
- D√©coupe ce projet en t√¢ches simples et faisables
- Structure la strat√©gie marketing globale avec ta rigueur habituelle
- Assure-toi que les d√©lais sont r√©alistes (tu sais comme j'aime quand tout roule!)
- Coordonne avec Hugo pour la partie tech et √âlodie pour le contenu
${alignment?.target ? `- Adapte sp√©cifiquement pour : ${alignment.target}` : ''}

**Charge estim√©e:** Moyenne - tu g√®res √ßa les doigts dans le nez!
**D√©lai:** √Ä toi de voir, mais garde-nous un peu de marge comme toujours üíù

*Gestion & Structuration - 46 ans*`,

      "HugoAI": `üíª **Brief de HugoAI (28 ans)** - D√©veloppeur Web
    
Mission: ${objective}${contextSection}${targetSection}${constraintsSection}

Salut mec! üéÆ Sors ton hoodie pr√©f√©r√©, on a du boulot!

**Stack √† analyser:**
- Contraintes techniques pour cette mission
- Architecture recommand√©e
- Outils et frameworks optimaux
- Timeline de d√©veloppement r√©aliste
${alignment?.constraints ? `- Respecte les contraintes : ${alignment.constraints}` : ''}

**Ton style:** Efficace mais d√©tendu - comme d'hab!
**Collab:** Karine pour le cadrage, √âlodie pour l'UX/UI

**Setup:** Caf√© ‚úì Playlist ‚úì Mode focus ‚úì`,

      "JPBot": `üìä **Brief de JPBot** - Analyste Data & Performance
    
Mission: ${objective}${contextSection}${targetSection}${constraintsSection}

Analyse requise. Donn√©es √† traiter. Optimisation en cours.

**P√©rim√®tre d'analyse:**
- KPIs pertinents √† d√©finir
- M√©triques de performance
- Outils de tracking recommand√©s
- Dashboards de suivi
${alignment?.target ? `- Focus mesure pour : ${alignment.target}` : ''}

**M√©thodologie:** Factuelle. Pr√©cise. Actionnable.
**Livrables:** Tableaux de bord + recommandations chiffr√©es.

*"Les donn√©es ne mentent jamais. Les interpr√©tations parfois."*`,

      "ElodieAI": `‚úçÔ∏è **Brief d'ElodieAI (31 ans)** - R√©dactrice & Content Manager
    
Mission: ${objective}${contextSection}${targetSection}${constraintsSection}

Coucou √âlodie! üéµ Mets ta playlist lo-fi, on va cr√©er quelque chose de beau!

**Ton terrain de jeu:**
- Contenus optimis√©s SEO pour cette mission
- Tone-of-Voice adapt√© √† la cible
- Guidelines EEAT respect√©es
- UX writing qui guide naturellement
${alignment?.target ? `- √âcris sp√©cifiquement pour : ${alignment.target}` : ''}

**Style:** Calme, pr√©cise, cr√©ative - comme tu aimes!
**Collaboration:** Hugo pour les projets web, Clara pour les r√©visions crois√©es

**Bonus:** N'h√©site pas avec tes jeux de mots discrets, √ßa fait toujours la diff√©rence! ‚ú®`,

      "ClaraLaCloseuse": `üéØ **Brief de Clara La Closeuse (35 ans)** - Copywriter Commercial
    
Mission: ${objective}${contextSection}${targetSection}${constraintsSection}

Hey Clara! ‚òï Caf√© noir pr√™t? On va faire du punch!

**Ton d√©fi:**
- Pages de vente qui convertissent
- Landing pages avec du chien
- CTA puissants qui font cliquer
- Hooks et slogans m√©morables
${alignment?.target ? `- Convaincs sp√©cifiquement : ${alignment.target}` : ''}

**Attitude:** Rapide, fut√©e, convaincante - montre-leur ton style pub!
**Objectif:** Optimiser les taux de conversion au max

**Team:** B√©a va beta-tester tes cr√©ations, JPBot va encore faire sa t√™te... mais tu vas le faire rire malgr√© lui üòè`,

      "FauconLeMaitreFocus": `üß† **Brief de Faucon Le Ma√Ætre Focus (√¢ge inconnu)** - Anti-Dispersion
    
Mission: ${objective}${contextSection}${targetSection}${constraintsSection}

Focus. Essentiel. Livrable.

**√âpure cette mission:**
- √âlimine le superflu
- Garde uniquement l'essentiel
- Assure-toi que c'est r√©alisable rapidement
- Ram√®ne tout √† l'objectif principal
${alignment?.constraints ? `- Contraintes non-n√©gociables : ${alignment.constraints}` : ''}

**M√©thode:** Minimaliste. Direct. Efficace.
**D√©lai:** Le plus court possible sans sacrifier la qualit√©.

**M√©ditation du jour:** "Que faut-il vraiment pour r√©ussir cette mission?" üßò‚Äç‚ôÇÔ∏è`
    };

    return agents.map(agentName => ({
      agent: agentName,
      brief: briefTemplates[agentName] || `Brief g√©n√©rique pour ${agentName}: ${objective}`
    }));
  }

  async function generatePersonalizedQuestions(objective: string) {
    if (!objective || objective.trim().length === 0) {
      return personalizedQuestions; // Retourner les questions par d√©faut
    }

    setLoadingQuestions(true);
    
    try {
      const response = await fetch('/api/missions/generate-questions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ objective }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.questions && Array.isArray(data.questions) && data.questions.length === 3) {
          console.log('‚úÖ Questions GPT g√©n√©r√©es:', data.questions);
          return data.questions;
        }
      }
      
      // Fallback en cas d'erreur
      console.warn('‚ö†Ô∏è Utilisation des questions par d√©faut');
      return personalizedQuestions;
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration questions:', error);
      return personalizedQuestions; // Questions par d√©faut en cas d'erreur
    } finally {
      setLoadingQuestions(false);
    }
  }

    async function createMission() {
    if (!prompt.trim()) return;
    
    // V√©rifier si l'utilisateur peut utiliser un essai
    if (!useTrial()) {
      return; // Le modal sera affich√© automatiquement
    }

    // G√©n√©rer les questions personnalis√©es selon l'objectif
    const customQuestions = await generatePersonalizedQuestions(prompt);
    setPersonalizedQuestions(customQuestions);
    
    // Ouvrir les questions d'alignement personnalis√©es
    setShowAlignmentQuestions(true);
  }

  async function proceedToMissionCreation() {
    try {
      setCreating(true);
      
      // Pr√©parer les donn√©es de la mission
      const agentsToUse = selectedAgents.length > 0 ? selectedAgents : ["KarineAI", "HugoAI", "JPBot", "ElodieAI"];

      const res = await fetch("/api/missions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: prompt,
          details: missionDetails,
          priority: "auto",
          selectedAgents: agentsToUse,
          alignmentAnswers: alignmentAnswers
        })
      });
      
      const json = await res.json();
      if (json.missionId) {
        setPrompt("");
        setPriorityEvaluation(null);
        setShowPriorityPreview(false);
        setShowAlignmentQuestions(false);
        setAlignmentAnswers({ context: '', target: '', constraints: '' });
        fetchMissions();
        // Rediriger vers la mission cr√©√©e
        window.location.href = `/missions/${json.missionId}`;
      }
    } catch (e: any) {
      setError(e?.message || "Erreur de cr√©ation");
    } finally {
      setCreating(false);
    }
  }



  function startVoice() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      alert("Reconnaissance vocale non support√©e dans ce navigateur");
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    recognition.lang = 'fr-FR';
    recognition.onstart = () => setListening(true);
    recognition.onend = () => setListening(false);
    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setPrompt(transcript);
    };
    
    recognition.start();
  }

  const toggleAgent = (agentName: string) => {
    setSelectedAgents(prev => {
      if (prev.includes(agentName)) {
        return prev.filter(name => name !== agentName);
      } else {
        return [...prev, agentName];
      }
    });
  };

  const selectAllAgents = () => {
    setSelectedAgents(availableAgents.map(agent => agent.name));
  };

  const clearAllAgents = () => {
    setSelectedAgents([]);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "received": return "#8898aa";
      case "split": return "#f79009";
      case "in_progress": return "#0570de";
      case "compiled": return "#00d924";
      case "archived": return "#00a86b";
      case "notified": return "#00d924";
      case "failed": return "#df1b41";
      default: return "#8898aa";
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case "received": return "Re√ßue";
      case "split": return "D√©coup√©e";
      case "in_progress": return "En cours";
      case "compiled": return "Compil√©e";
      case "archived": return "Archiv√©e";
      case "notified": return "Termin√©e";
      case "failed": return "√âchou√©e";
      default: return status;
    }
  };

  const getMissionIcon = (objective: string) => {
    const lower = objective.toLowerCase();
    if (lower.includes('marketing') || lower.includes('campagne')) return 'üìä';
    if (lower.includes('d√©veloppement') || lower.includes('site') || lower.includes('app')) return 'üíª';
    if (lower.includes('contenu') || lower.includes('article') || lower.includes('blog')) return '‚úçÔ∏è';
    if (lower.includes('design') || lower.includes('logo') || lower.includes('graphique')) return 'üé®';
    if (lower.includes('vente') || lower.includes('commercial')) return 'üí∞';
    if (lower.includes('formation') || lower.includes('cours')) return 'üéì';
    return 'üéØ';
  };

  // Afficher les 3 derni√®res missions
  const recentMissions = missions.slice(0, 3);

  // Missions remarquables
  const getNotableMissions = () => {
    const now = new Date();
    const threeDaysAgo = new Date(now.getTime() - (3 * 24 * 60 * 60 * 1000));
    
    return missions
      .filter(mission => {
        const isRecentlyCompleted = mission.status === 'notified' && 
          new Date(mission.createdAt) > threeDaysAgo;
        const isHighPriority = mission.priority === 'high';
        const hasNotableKeywords = [
          'urgent', 'important', 'critique', 'strat√©gique', 'innovation',
          'lancement', 'croissance', 'transformation', 'r√©volution'
        ].some(keyword => 
          mission.objective.toLowerCase().includes(keyword)
        );
        
        return isRecentlyCompleted || isHighPriority || hasNotableKeywords;
      })
      .slice(0, 2);
  };
  
  const notableMissions = getNotableMissions();

  const headerActions = (
    <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
      <Link
        href="/missions"
        style={{
          padding: "10px 16px",
          background: "white",
          color: "#425466",
          textDecoration: "none",
          border: "1px solid #e3e8ee",
          borderRadius: 6,
          fontSize: "14px",
          fontWeight: "500",
          transition: "all 0.2s",
          fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
        }}
        onMouseOver={(e) => {
          e.currentTarget.style.borderColor = "#c7d2fe";
          e.currentTarget.style.color = "#0a2540";
        }}
        onMouseOut={(e) => {
          e.currentTarget.style.borderColor = "#e3e8ee";
          e.currentTarget.style.color = "#425466";
        }}
      >
        Voir toutes les missions
      </Link>
    </div>
  );

  return (
    <AuthGuard>
      <Layout 
        title="Accueil" 
        subtitle="Vue d'ensemble de vos missions et de votre √©quipe IA"
        headerActions={headerActions}
      >
      {/* Create Mission Card */}
      <div style={{
        ...styles.section,
        marginBottom: theme.spacing.xl
      }}>
        <div style={{
          marginBottom: 24
        }}>
          <h2 style={styles.subtitle}>
            <FontAwesomeIcon icon="rocket" style={{ marginRight: theme.spacing.sm, color: theme.colors.primary.main }} />
            Cr√©er une nouvelle mission
          </h2>
          <div style={{
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            gap: 16
          }}>
            <p style={styles.body}>
              D√©crivez votre objectif et laissez votre √©quipe IA se charger du reste
            </p>
            {!isAuthenticated && (
              <div style={{
                background: trialsLeft > 0 ? "#e0f7fa" : "#ffebee",
                color: trialsLeft > 0 ? "#00695c" : "#c62828",
                padding: "4px 12px",
                borderRadius: 12,
                fontSize: "12px",
                fontWeight: "500",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                whiteSpace: "nowrap"
              }}>
                {trialsLeft > 0 ? (
                  <>üéÅ {trialsLeft} essai{trialsLeft !== 1 ? 's' : ''} gratuit{trialsLeft !== 1 ? 's' : ''}</>
                ) : (
                  <>üîí Essais √©puis√©s</>
                )}
              </div>
            )}
          </div>
        </div>

        {/* S√©lecteur d'agents subtil */}
        <div style={{ marginBottom: 16 }}>
          <div style={{ 
            display: "flex", 
            alignItems: "center", 
            gap: 12,
            marginBottom: 8
          }}>
            <span style={{
              fontSize: "13px",
              color: "#8898aa",
              fontWeight: "500",
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
            }}>
              √âquipe mobilis√©e ({selectedAgents.length})
            </span>
            <button
              onClick={() => setShowAgentSelector(!showAgentSelector)}
              style={{
                background: "transparent",
                border: "1px solid #e3e8ee",
                borderRadius: 4,
                padding: "4px 8px",
                fontSize: "11px",
                color: "#8898aa",
                cursor: "pointer",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                transition: "all 0.2s"
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.borderColor = "#635bff";
                e.currentTarget.style.color = "#635bff";
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.borderColor = "#e3e8ee";
                e.currentTarget.style.color = "#8898aa";
              }}
            >
              {showAgentSelector ? "Masquer" : "Modifier"}
            </button>
          </div>

          {/* Agents s√©lectionn√©s - toujours visibles */}
          <div style={{
            display: "flex",
            flexWrap: "wrap",
            gap: 6,
            marginBottom: showAgentSelector ? 12 : 0
          }}>
            {selectedAgents.map(agentName => {
              const agent = availableAgents.find(a => a.name === agentName);
              return agent ? (
                <div key={agentName} style={{
                  display: "flex",
                  alignItems: "center",
                  gap: 4,
                  background: `${agent.color}15`,
                  border: `1px solid ${agent.color}30`,
                  borderRadius: 12,
                  padding: "3px 8px",
                  fontSize: "11px",
                  color: agent.color,
                  fontWeight: "500",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  <FontAwesomeIcon icon={agent.icon as any} style={{ fontSize: "10px" }} />
                  <span>{agent.name}</span>
                </div>
              ) : null;
            })}
            {selectedAgents.length === 0 && (
              <span style={{
                fontSize: "11px",
                color: "#df1b41",
                fontStyle: "italic",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                Aucun agent s√©lectionn√©
              </span>
            )}
          </div>

          {/* Panneau de s√©lection */}
          {showAgentSelector && (
            <div style={{
              background: "white",
              border: "1px solid #e3e8ee",
              borderRadius: 8,
              padding: 16,
              boxShadow: "0 2px 8px rgba(0, 0, 0, 0.1)"
            }}>
              <div style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
                marginBottom: 12
              }}>
                <span style={{
                  fontSize: "12px",
                  fontWeight: "600",
                  color: "#0a2540",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  Choisir les agents
                </span>
                <div style={{ display: "flex", gap: 6 }}>
                  <button
                    onClick={selectAllAgents}
                    style={{
                      background: "transparent",
                      border: "none",
                      fontSize: "11px",
                      color: "#635bff",
                      cursor: "pointer",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}
                  >
                    Tout s√©lectionner
                  </button>
                  <span style={{ color: "#e3e8ee" }}>‚Ä¢</span>
                  <button
                    onClick={clearAllAgents}
                    style={{
                      background: "transparent",
                      border: "none",
                      fontSize: "11px",
                      color: "#8898aa",
                      cursor: "pointer",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}
                  >
                    Tout d√©s√©lectionner
                  </button>
                </div>
              </div>

              <div style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                gap: 8
              }}>
                {availableAgents.map(agent => (
                  <div
                    key={agent.id}
                    onClick={() => toggleAgent(agent.name)}
                    style={{
                      display: "flex",
                      alignItems: "center",
                      gap: 8,
                      padding: "8px 10px",
                      background: selectedAgents.includes(agent.name) ? `${agent.color}08` : "transparent",
                      border: selectedAgents.includes(agent.name) ? `1px solid ${agent.color}30` : "1px solid #f6f9fc",
                      borderRadius: 6,
                      cursor: "pointer",
                      transition: "all 0.2s",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}
                    onMouseEnter={(e) => {
                      if (!selectedAgents.includes(agent.name)) {
                        e.currentTarget.style.background = "#f6f9fc";
                        e.currentTarget.style.borderColor = "#e3e8ee";
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (!selectedAgents.includes(agent.name)) {
                        e.currentTarget.style.background = "transparent";
                        e.currentTarget.style.borderColor = "#f6f9fc";
                      }
                    }}
                  >
                    <div style={{
                      width: 20,
                      height: 20,
                      borderRadius: 4,
                      background: selectedAgents.includes(agent.name) ? agent.color : "#f6f9fc",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      fontSize: "10px",
                      transition: "all 0.2s"
                    }}>
                      {selectedAgents.includes(agent.name) ? "‚úì" : <FontAwesomeIcon icon={agent.icon as any} />}
                    </div>
                    <div style={{ flex: 1 }}>
                      <div style={{
                        fontSize: "12px",
                        fontWeight: "500",
                        color: "#0a2540",
                        marginBottom: 2
                      }}>
                        {agent.name}
                      </div>
                      <div style={{
                        fontSize: "10px",
                        color: "#8898aa"
                      }}>
                        {agent.role}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        <div style={{ display: "flex", flexDirection: "column", gap: 12 }}>
          <div style={{ display: "flex", gap: 8, alignItems: "stretch" }}>
            <input
              placeholder="D√©crivez votre mission..."
              value={prompt}
              onChange={e => {
                setPrompt(e.target.value);
                setShowPriorityPreview(false);
                setPriorityEvaluation(null);
              }}
              onKeyDown={e => e.key === "Enter" && createMission()}
              style={{ 
                flex: 1, 
                padding: "12px 16px", 
                border: "1px solid #e3e8ee", 
                borderRadius: 6,
                fontSize: "14px",
                background: "white",
                color: "#0a2540",
                outline: "none",
                transition: "border-color 0.2s",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}
              disabled={creating}
              onFocus={(e) => e.target.style.borderColor = "#635bff"}
              onBlur={(e) => e.target.style.borderColor = "#e3e8ee"}
            />
          <button
            onClick={startVoice}
            disabled={listening || creating}
            style={{
              padding: "12px 16px",
              border: "1px solid #e3e8ee",
              borderRadius: 6,
              background: listening ? "#df1b41" : "white",
              color: listening ? "white" : "#425466",
              cursor: listening ? "not-allowed" : "pointer",
              fontSize: "14px",
              minWidth: 48,
              transition: "all 0.2s",
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
            }}
          >
            {listening ? "üî¥" : "üéôÔ∏è"}
          </button>
          <button
            onClick={previewPriority}
            disabled={!prompt.trim() || creating}
            style={{
              padding: "12px 16px",
              border: "1px solid #ff6b35",
              borderRadius: 6,
              background: "white",
              color: "#ff6b35",
              cursor: !prompt.trim() || creating ? "not-allowed" : "pointer",
              fontSize: "14px",
              fontWeight: "500",
              transition: "all 0.2s",
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
              minWidth: 48
            }}
            onMouseOver={(e) => {
              if (prompt.trim() && !creating) {
                e.currentTarget.style.background = "#ff6b35";
                e.currentTarget.style.color = "white";
              }
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.background = "white";
              e.currentTarget.style.color = "#ff6b35";
            }}
          >
            ‚ö°
          </button>
          <button
            onClick={createMission}
            disabled={!prompt.trim() || creating}
            style={{
              padding: "12px 24px",
              border: "none",
              borderRadius: 6,
              background: creating 
                ? "#8898aa" 
                : "#635bff",
              color: "white",
              cursor: creating || !prompt.trim() ? "not-allowed" : "pointer",
              fontSize: "14px",
              fontWeight: "500",
              transition: "background-color 0.2s",
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
            }}
          >
            {creating ? "Cr√©ation..." : "Cr√©er mission"}
          </button>
        </div>

        {/* Champ d√©tails de la mission */}
        <textarea
          placeholder="üìã D√©tails suppl√©mentaires (optionnel) - Contexte, contraintes, ressources disponibles, d√©lais..."
          value={missionDetails}
          onChange={e => setMissionDetails(e.target.value)}
          style={{ 
            width: "100%",
            minHeight: "80px",
            padding: "12px 16px", 
            border: "1px solid #e3e8ee", 
            borderRadius: 6,
            fontSize: "14px",
            background: "white",
            color: "#0a2540",
            outline: "none",
            transition: "border-color 0.2s",
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
            resize: "vertical"
          }}
          disabled={creating}
          onFocus={(e) => e.target.style.borderColor = "#635bff"}
          onBlur={(e) => e.target.style.borderColor = "#e3e8ee"}
        />

        {/* Pr√©visualisation de la priorit√© par PriorityBot */}
        {showPriorityPreview && priorityEvaluation && (
          <div style={{
            marginTop: 16,
            background: "#fff8e1",
            border: "1px solid #ffd54f",
            borderRadius: 8,
            padding: 16,
            animation: "fadeIn 0.3s ease-in-out"
          }}>
            <div style={{
              display: "flex",
              alignItems: "center",
              gap: 12,
              marginBottom: 12
            }}>
              <div style={{
                width: 32,
                height: 32,
                borderRadius: 6,
                background: "#ff6b35",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "16px"
              }}>
                ‚ö°
              </div>
              <div>
                <div style={{
                  fontSize: "14px",
                  fontWeight: "600",
                  color: "#0a2540",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  Analyse PriorityBot
                </div>
                <div style={{
                  fontSize: "12px",
                  color: "#8898aa",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  √âvaluation automatique de priorit√©
                </div>
              </div>
              <div style={{
                marginLeft: "auto",
                display: "flex",
                alignItems: "center",
                gap: 8
              }}>
                <div style={{
                  background: priorityEvaluation.priority === 'high' ? "#df1b41" : 
                             priorityEvaluation.priority === 'medium' ? "#f79009" : "#00a86b",
                  color: "white",
                  padding: "4px 12px",
                  borderRadius: 12,
                  fontSize: "12px",
                  fontWeight: "600",
                  textTransform: "uppercase",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  {priorityEvaluation.priority === 'high' ? 'HAUTE' :
                   priorityEvaluation.priority === 'medium' ? 'MOYENNE' : 'BASSE'}
                </div>
                <div style={{
                  fontSize: "14px",
                  fontWeight: "600",
                  color: "#0a2540",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  {priorityEvaluation.score}/10
                </div>
              </div>
            </div>
            
            <div style={{
              fontSize: "13px",
              color: "#425466",
              lineHeight: "1.5",
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
              whiteSpace: "pre-line"
            }}>
              {priorityEvaluation.reasoning}
            </div>

            {/* Facteurs d√©taill√©s */}
            <div style={{
              display: "grid",
              gridTemplateColumns: "repeat(4, 1fr)",
              gap: 12,
              marginTop: 16,
              padding: 12,
              background: "rgba(255, 255, 255, 0.5)",
              borderRadius: 6
            }}>
              {Object.entries(priorityEvaluation.factors).map(([factor, score]) => (
                <div key={factor} style={{ textAlign: "center" }}>
                  <div style={{
                    fontSize: "11px",
                    color: "#8898aa",
                    marginBottom: 4,
                    textTransform: "capitalize",
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
                    {factor === 'urgency' ? 'Urgence' :
                     factor === 'impact' ? 'Impact' :
                     factor === 'complexity' ? 'Simplicit√©' :
                     'Strat√©gique'}
                  </div>
                  <div style={{
                    fontSize: "16px",
                    fontWeight: "700",
                    color: "#0a2540",
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
{score as number}/10
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {error && (
          <div style={{
            marginTop: 16,
            padding: "12px 16px",
            background: "#fef7f7",
            border: "1px solid #fecaca",
            borderRadius: 6,
            color: "#df1b41",
            fontSize: "14px"
          }}>
            {error}
          </div>
        )}
      </div>

      {/* Stats Cards */}
      <div style={{
        display: "grid",
        gridTemplateColumns: "repeat(auto-fit, minmax(240px, 1fr))",
        gap: 24,
        marginBottom: 32
      }}>
        <div style={{
          background: "white",
          borderRadius: 8,
          padding: 24,
          border: "1px solid #e3e8ee",
          boxShadow: "0 1px 3px rgba(16, 24, 40, 0.1)"
        }}>
          <div style={{
            fontSize: "14px",
            color: "#425466",
            marginBottom: 8,
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}>
            Total missions
          </div>
          <div style={{
            fontSize: "32px",
            fontWeight: "700",
            color: "#0a2540",
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}>
            {missions.length}
          </div>
        </div>

        <div style={{
          background: "white",
          borderRadius: 8,
          padding: 24,
          border: "1px solid #e3e8ee",
          boxShadow: "0 1px 3px rgba(16, 24, 40, 0.1)"
        }}>
          <div style={{
            fontSize: "14px",
            color: "#425466",
            marginBottom: 8,
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}>
            Termin√©es
          </div>
          <div style={{
            fontSize: "32px",
            fontWeight: "700",
            color: "#0a2540",
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}>
            {missions.filter(m => m.status === 'notified').length}
          </div>
        </div>

        <div style={{
          background: "white",
          borderRadius: 8,
          padding: 24,
          border: "1px solid #e3e8ee",
          boxShadow: "0 1px 3px rgba(16, 24, 40, 0.1)"
        }}>
          <div style={{
            fontSize: "14px",
            color: "#425466",
            marginBottom: 8,
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}>
            En cours
          </div>
          <div style={{
            fontSize: "32px",
            fontWeight: "700",
            color: "#0a2540",
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}>
            {missions.filter(m => ['received', 'split', 'in_progress', 'compiled'].includes(m.status)).length}
          </div>
        </div>
      </div>

      {/* Recent Missions */}
      <div style={{
        background: "white",
        borderRadius: 8,
        border: "1px solid #e3e8ee",
        boxShadow: "0 1px 3px rgba(16, 24, 40, 0.1)",
        overflow: "hidden"
      }}>
        <div style={{
          padding: "24px 24px 0 24px",
          borderBottom: "1px solid #e3e8ee"
        }}>
          <div style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: 16
          }}>
            <h3 style={{
              fontSize: "18px",
              fontWeight: "600",
              color: "#0a2540",
              margin: 0,
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
            }}>
              Missions r√©centes
            </h3>
            <Link
              href="/missions"
              style={{
                color: "#635bff",
                textDecoration: "none",
                fontSize: "14px",
                fontWeight: "500",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}
            >
              Voir toutes ‚Üí
            </Link>
          </div>
        </div>

        {loading ? (
          <div style={{
            textAlign: "center",
            padding: 40,
            color: "#8898aa",
            fontSize: "14px"
          }}>
            Chargement...
          </div>
        ) : recentMissions.length === 0 ? (
          <div style={{
            textAlign: "center",
            padding: 60,
            color: "#8898aa"
          }}>
            <div style={{ fontSize: "48px", marginBottom: 16 }}>üéØ</div>
            <div style={{ fontSize: "16px", marginBottom: 8, fontWeight: "500" }}>
              Aucune mission pour le moment
            </div>
            <div style={{ fontSize: "14px", color: "#8898aa" }}>
              Cr√©ez votre premi√®re mission ci-dessus !
            </div>
          </div>
        ) : (
          <div>
            {recentMissions.map((mission, index) => (
              <div 
                key={mission.id} 
                onClick={() => window.location.href = `/missions/${mission.id}`}
                style={{
                  padding: "16px 24px",
                  borderBottom: index < recentMissions.length - 1 ? "1px solid #e3e8ee" : "none",
                  cursor: "pointer",
                  transition: "background-color 0.2s",
                  display: "grid",
                  gridTemplateColumns: "auto 1fr auto auto",
                  gap: 16,
                  alignItems: "center"
                }}
                onMouseOver={(e) => e.currentTarget.style.backgroundColor = "#f7f9fc"}
                onMouseOut={(e) => e.currentTarget.style.backgroundColor = "transparent"}
              >
                {/* Ic√¥ne */}
                <div style={{ fontSize: "16px", opacity: 0.7 }}>
                  {getMissionIcon(mission.objective)}
                </div>

                {/* Titre */}
                <div>
                  <div style={{
                    fontSize: "14px",
                    fontWeight: "500",
                    color: "#0a2540",
                    marginBottom: 2,
                    lineHeight: "1.4",
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
                    {mission.objective.length > 60 
                      ? mission.objective.substring(0, 60) + "..." 
                      : mission.objective}
                  </div>
                  <div style={{
                    fontSize: "12px",
                    color: "#8898aa",
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
                    {new Date(mission.createdAt).toLocaleDateString('fr-FR')}
                  </div>
                </div>

                {/* Statut */}
                <div style={{
                  background: `${getStatusColor(mission.status)}15`,
                  color: getStatusColor(mission.status),
                  padding: "4px 8px",
                  borderRadius: 4,
                  fontSize: "11px",
                  fontWeight: "500",
                  textAlign: "center",
                  minWidth: 70,
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                  textTransform: "uppercase",
                  letterSpacing: "0.5px"
                }}>
                  {getStatusLabel(mission.status)}
                </div>

                {/* Fl√®che */}
                <div style={{
                  color: "#8898aa",
                  fontSize: "12px"
                }}>
                  ‚Üí
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal des questions d'alignement */}
      {showAlignmentQuestions && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.6)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000,
            padding: '20px'
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowAlignmentQuestions(false);
            }
          }}
        >
          <div
            style={{
              background: 'white',
              borderRadius: 12,
              maxWidth: '600px',
              width: '100%',
              maxHeight: '90vh',
              overflow: 'hidden',
              boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
              position: 'relative'
            }}
          >
            {/* Header */}
            <div style={{
              background: 'linear-gradient(135deg, #ff6b35, #f7931e)',
              color: 'white',
              padding: '24px 30px',
              borderBottom: '1px solid #e3e8ee'
            }}>
              <h2 style={{
                fontSize: '20px',
                fontWeight: '600',
                margin: 0,
                marginBottom: 4,
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                üéØ Questions d'alignement
              </h2>
              <p style={{
                fontSize: '14px',
                opacity: 0.9,
                margin: 0,
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                Questions personnalis√©es selon votre mission : <strong>"{prompt.length > 50 ? prompt.substring(0, 50) + "..." : prompt}"</strong>
              </p>
            </div>

            {/* Indicateur de chargement des questions GPT */}
            {loadingQuestions && (
              <div style={{
                padding: '20px 30px',
                backgroundColor: '#f8fafc',
                borderBottom: '1px solid #e3e8ee',
                display: 'flex',
                alignItems: 'center',
                gap: '12px'
              }}>
                <div style={{
                  width: '20px',
                  height: '20px',
                  border: '2px solid #e3e8ee',
                  borderTop: '2px solid #635bff',
                  borderRadius: '50%',
                  animation: 'spin 1s linear infinite'
                }}></div>
                <span style={{
                  fontSize: '14px',
                  color: '#6b7280',
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  ü§ñ GPT g√©n√®re des questions personnalis√©es pour votre mission...
                </span>
              </div>
            )}

            {/* Contenu */}
            <div style={{
              padding: '30px',
              maxHeight: 'calc(90vh - 200px)',
              overflow: 'auto'
            }}>
              <div style={{ display: 'grid', gap: 24 }}>
                {/* Question 1: Contexte */}
                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '600',
                    color: '#0a2540',
                    marginBottom: 8,
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
                    {personalizedQuestions[0]?.label || "Question 1"}
                  </label>
                  <textarea
                    value={alignmentAnswers.context}
                    onChange={(e) => setAlignmentAnswers({...alignmentAnswers, context: e.target.value})}
                    placeholder={personalizedQuestions[0]?.placeholder || "D√©crivez le contexte..."}
                    style={{
                      width: '100%',
                      minHeight: '80px',
                      padding: '12px 16px',
                      border: '1px solid #e3e8ee',
                      borderRadius: 8,
                      fontSize: '14px',
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                      resize: 'vertical',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#635bff';
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e3e8ee';
                    }}
                  />
                </div>

                {/* Question 2: Cible */}
                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '600',
                    color: '#0a2540',
                    marginBottom: 8,
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
                    {personalizedQuestions[1]?.label || "Question 2"}
                  </label>
                  <textarea
                    value={alignmentAnswers.target}
                    onChange={(e) => setAlignmentAnswers({...alignmentAnswers, target: e.target.value})}
                    placeholder={personalizedQuestions[1]?.placeholder || "D√©crivez votre cible..."}
                    style={{
                      width: '100%',
                      minHeight: '80px',
                      padding: '12px 16px',
                      border: '1px solid #e3e8ee',
                      borderRadius: 8,
                      fontSize: '14px',
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                      resize: 'vertical',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#635bff';
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e3e8ee';
                    }}
                  />
                </div>

                {/* Question 3: Contraintes */}
                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '14px',
                    fontWeight: '600',
                    color: '#0a2540',
                    marginBottom: 8,
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
                    {personalizedQuestions[2]?.label || "Question 3"}
                  </label>
                  <textarea
                    value={alignmentAnswers.constraints}
                    onChange={(e) => setAlignmentAnswers({...alignmentAnswers, constraints: e.target.value})}
                    placeholder={personalizedQuestions[2]?.placeholder || "D√©crivez vos contraintes..."}
                    style={{
                      width: '100%',
                      minHeight: '80px',
                      padding: '12px 16px',
                      border: '1px solid #e3e8ee',
                      borderRadius: 8,
                      fontSize: '14px',
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                      resize: 'vertical',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#635bff';
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e3e8ee';
                    }}
                  />
                </div>
              </div>
            </div>

            {/* Footer */}
            <div style={{
              padding: '20px 30px',
              borderTop: '1px solid #e3e8ee',
              background: '#f8fafc',
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center'
            }}>
              <button
                onClick={() => setShowAlignmentQuestions(false)}
                style={{
                  background: 'transparent',
                  border: '1px solid #e3e8ee',
                  borderRadius: 6,
                  padding: '10px 20px',
                  fontSize: '14px',
                  color: '#8898aa',
                  cursor: 'pointer',
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                  transition: 'all 0.2s'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.borderColor = '#d1d5db';
                  e.currentTarget.style.background = '#f9fafb';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.borderColor = '#e3e8ee';
                  e.currentTarget.style.background = 'transparent';
                }}
              >
                ‚Üê Annuler
              </button>
              
              <button
                onClick={proceedToMissionCreation}
                disabled={creating}
                style={{
                  background: creating ? '#8898aa' : '#ff6b35',
                  border: 'none',
                  borderRadius: 6,
                  padding: '12px 24px',
                  fontSize: '14px',
                  fontWeight: '600',
                  color: 'white',
                  cursor: creating ? 'not-allowed' : 'pointer',
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                  display: 'flex',
                  alignItems: 'center',
                  gap: 8,
                  transition: 'background 0.2s'
                }}
                onMouseEnter={(e) => {
                  if (!creating) {
                    e.currentTarget.style.background = '#e55a2b';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!creating) {
                    e.currentTarget.style.background = '#ff6b35';
                  }
                }}
              >
                {creating ? (
                  <>
                    <span>‚ü≥</span>
                    Cr√©ation en cours...
                  </>
                ) : (
                  <>
                    <span>üöÄ</span>
                    Lancer la mission
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </Layout>
  </AuthGuard>
  );
}
