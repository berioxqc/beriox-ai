"use client";
import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import Layout from "@/components/Layout";
import AuthGuard from "@/components/AuthGuard";
import Link from "next/link";

// Fonction pour formater le contenu Markdown
function formatMarkdownContent(content: any): string {
  if (typeof content === 'string') {
    return content;
  }
  if (typeof content === 'object' && content.content) {
    return content.content;
  }
  return JSON.stringify(content, null, 2);
}

// Fonction pour formater le contenu en HTML simple
function formatAsHtml(content: string): JSX.Element {
  const lines = content.split('\n');
  return (
    <div>
      {lines.map((line, index) => {
        // Titres
        if (line.startsWith('# ')) {
          return <h3 key={index} style={{ fontSize: '18px', fontWeight: '700', color: '#0a2540', marginBottom: '12px', marginTop: index > 0 ? '24px' : '0' }}>{line.substring(2)}</h3>;
        }
        if (line.startsWith('## ')) {
          return <h4 key={index} style={{ fontSize: '16px', fontWeight: '600', color: '#0a2540', marginBottom: '8px', marginTop: '20px' }}>{line.substring(3)}</h4>;
        }
        if (line.startsWith('### ')) {
          return <h5 key={index} style={{ fontSize: '14px', fontWeight: '600', color: '#425466', marginBottom: '6px', marginTop: '16px' }}>{line.substring(4)}</h5>;
        }
        // Listes
        if (line.startsWith('- ')) {
          return <div key={index} style={{ marginLeft: '16px', marginBottom: '4px' }}>‚Ä¢ {line.substring(2)}</div>;
        }
        // Gras
        if (line.includes('**')) {
          const parts = line.split('**');
          return (
            <div key={index} style={{ marginBottom: '4px' }}>
              {parts.map((part, i) => i % 2 === 1 ? <strong key={i}>{part}</strong> : part)}
            </div>
          );
        }
        // Ligne vide
        if (line.trim() === '') {
          return <div key={index} style={{ height: '8px' }} />;
        }
        // Texte normal
        return <div key={index} style={{ marginBottom: '4px' }}>{line}</div>;
      })}
    </div>
  );
}

// Fonction pour trouver le brief correspondant √† un livrable
function findRelatedBrief(deliverable: Deliverable, briefs: Brief[]): Brief | undefined {
  return briefs.find(brief => brief.agent === deliverable.agent);
}

type Mission = {
  id: string;
  objective: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  deadline?: string | null;
  priority?: string | null;
  context?: string | null;
  notionPageId?: string | null;
};

type Brief = {
  id: string;
  agent: string;
  contentJson: any;
  status: string;
  createdAt: string;
};

type Deliverable = {
  id: string;
  agent: string;
  output: any;
  createdAt: string;
};

type Report = {
  id: string;
  summary: string;
  detailsMd: string;
  cautions: string | null;
  nextSteps: string | null;
  createdAt: string;
};

// Informations des agents avec la vraie √©quipe
const AGENTS_INFO = {
  "KarineAI": {
    emoji: "üéØ",
    color: "#635bff",
    role: "Strat√®ge Marketing",
    specialty: "Analyse de march√© & Positionnement"
  },
  "HugoAI": {
    emoji: "üé®", 
    color: "#00d924",
    role: "Cr√©atif & Designer",
    specialty: "Concepts visuels & Storytelling"
  },
  "JPBot": {
    emoji: "üìä",
    color: "#0570de",
    role: "Analyste Data",
    specialty: "Performance & Insights"
  },
  "ElodieAI": {
    emoji: "‚úçÔ∏è",
    color: "#f79009",
    role: "R√©dactrice",
    specialty: "Contenu & Communication"
  },
  "ClaraLaCloseuse": {
    emoji: "üí∞",
    color: "#df1b41",
    role: "Experte Conversion",
    specialty: "Closing & Persuasion"
  },
  "FauconLeMaitreFocus": {
    emoji: "ü¶Ö",
    color: "#8898aa",
    role: "Coach Productivit√©",
    specialty: "Focus & Optimisation"
  },
  "PriorityBot": {
    emoji: "‚ö°",
    color: "#ff6b35",
    role: "√âvaluateur Priorit√©",
    specialty: "Analyse d'urgence & Impact"
  }
};

export default function MissionDetailPage() {
  const params = useParams();
  const router = useRouter();
  const [mission, setMission] = useState<Mission | null>(null);
  const [briefs, setBriefs] = useState<Brief[]>([]);
  const [deliverables, setDeliverables] = useState<Deliverable[]>([]);
  const [report, setReport] = useState<Report | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [restarting, setRestarting] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'overview' | 'briefs' | 'deliverables' | 'report'>('overview');
  const [selectedBrief, setSelectedBrief] = useState<Brief | null>(null);
  const [regeneratingReport, setRegeneratingReport] = useState(false);

  useEffect(() => {
    if (params.id) {
      fetchMissionData(params.id as string);
    }
  }, [params.id]);

  // Gestion de la fermeture de la modal par Escape
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && selectedBrief) {
        setSelectedBrief(null);
      }
    };

    if (selectedBrief) {
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden'; // Emp√™cher le scroll en arri√®re-plan
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [selectedBrief]);

  async function fetchMissionData(missionId: string) {
    try {
      setLoading(true);
      const [missionRes, briefsRes, deliverablesRes, reportRes] = await Promise.all([
        fetch(`/api/missions/${missionId}`),
        fetch(`/api/missions/${missionId}/briefs`),
        fetch(`/api/missions/${missionId}/deliverables`),
        fetch(`/api/missions/${missionId}/report`)
      ]);

      const [missionData, briefsData, deliverablesData, reportData] = await Promise.all([
        missionRes.json(),
        briefsRes.json(),
        deliverablesRes.json(),
        reportRes.json()
      ]);

      setMission(missionData.mission);
      setBriefs(briefsData.briefs || []);
      setDeliverables(deliverablesData.deliverables || []);
      setReport(reportData.report);
    } catch (e: any) {
      setError(e?.message || "Erreur de chargement");
    } finally {
      setLoading(false);
    }
  }

  const restartAgent = async (agentName: string) => {
    try {
      setRestarting(agentName);
      
      const response = await fetch(`/api/missions/${params.id}/restart-agent`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ agent: agentName })
      });

      if (!response.ok) {
        throw new Error('Erreur lors du red√©marrage');
      }

      // Recharger les donn√©es apr√®s red√©marrage
      setTimeout(() => {
        fetchMissionData(params.id as string);
      }, 4000); // Attendre 4 secondes pour laisser le temps √† l'agent de travailler

    } catch (error) {
      console.error('Erreur red√©marrage:', error);
      alert('Erreur lors du red√©marrage de l\'agent');
    } finally {
      setRestarting(null);
    }
  };

  const regenerateReport = async () => {
    try {
      setRegeneratingReport(true);
      
      const response = await fetch(`/api/missions/${params.id}/regenerate-report`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error('Erreur lors de la r√©g√©n√©ration du rapport');
      }

      const data = await response.json();
      setReport(data.report);
      
      // Optionnel : recharger toutes les donn√©es pour √™tre s√ªr
      // fetchMissionData(params.id as string);

    } catch (error) {
      console.error('Erreur r√©g√©n√©ration rapport:', error);
      alert('Erreur lors de la r√©g√©n√©ration du rapport');
    } finally {
      setRegeneratingReport(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "received": return "#8898aa";
      case "split": return "#f79009";
      case "in_progress": return "#0570de";
      case "compiled": return "#00d924";
      case "archived": return "#00a86b";
      case "notified": return "#00d924";
      case "failed": return "#df1b41";
      default: return "#8898aa";
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case "received": return "Re√ßue";
      case "split": return "D√©coup√©e";
      case "in_progress": return "En cours";
      case "compiled": return "Compil√©e";
      case "archived": return "Archiv√©e";
      case "notified": return "Termin√©e";
      case "failed": return "√âchou√©e";
      default: return status;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high": return "#df1b41";
      case "medium": return "#f79009";
      case "low": return "#00a86b";
      default: return "#8898aa";
    }
  };

  if (loading) {
    return (
      <AuthGuard>
        <Layout title="Mission" subtitle="Chargement des d√©tails...">
          <div style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            minHeight: "400px",
            background: "white",
            borderRadius: 8,
            border: "1px solid #e3e8ee"
          }}>
            <div style={{
              textAlign: "center",
              color: "#8898aa",
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
            }}>
              <div style={{
                width: "40px",
                height: "40px",
                border: "4px solid #e3e8ee",
                borderTop: "4px solid #635bff",
                borderRadius: "50%",
                animation: "spin 1s linear infinite",
                margin: "0 auto 20px"
              }} />
              <p>Chargement de la mission...</p>
            </div>
          </div>
        </Layout>
      </AuthGuard>
    );
  }

  if (error || !mission) {
    return (
      <AuthGuard>
        <Layout title="Erreur" subtitle="Mission introuvable">
          <div style={{
            background: "white",
            borderRadius: 8,
            padding: 40,
            textAlign: "center",
            border: "1px solid #e3e8ee"
          }}>
            <div style={{ fontSize: "48px", marginBottom: 16 }}>‚ùå</div>
            <h3 style={{
              fontSize: "18px",
              fontWeight: "600",
              color: "#df1b41",
              marginBottom: 8,
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
            }}>
              Mission introuvable
            </h3>
            <p style={{
              color: "#8898aa",
              marginBottom: 24,
              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
            }}>
              {error || "Cette mission n'existe pas ou a √©t√© supprim√©e"}
            </p>
            <Link
              href="/missions"
              style={{
                background: "#635bff",
                color: "white",
                padding: "10px 20px",
                borderRadius: 6,
                textDecoration: "none",
                fontSize: "14px",
                fontWeight: "500",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}
            >
              ‚Üê Retour aux missions
            </Link>
          </div>
        </Layout>
      </AuthGuard>
    );
  }

  const headerActions = (
    <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
      <Link
        href="/missions"
        style={{
          padding: "8px 16px",
          background: "white",
          color: "#425466",
          textDecoration: "none",
          border: "1px solid #e3e8ee",
          borderRadius: 6,
          fontSize: "14px",
          fontWeight: "500",
          transition: "all 0.2s",
          fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
        }}
        onMouseOver={(e) => {
          e.currentTarget.style.borderColor = "#c7d2fe";
          e.currentTarget.style.color = "#0a2540";
        }}
        onMouseOut={(e) => {
          e.currentTarget.style.borderColor = "#e3e8ee";
          e.currentTarget.style.color = "#425466";
        }}
      >
        ‚Üê Toutes les missions
      </Link>
      {mission.notionPageId && (
        <a
          href={`https://www.notion.so/${mission.notionPageId.replace(/-/g, "")}`}
          target="_blank"
          style={{
            padding: "8px 16px",
            background: "#0a2540",
            color: "white",
            textDecoration: "none",
            borderRadius: 6,
            fontSize: "14px",
            fontWeight: "500",
            transition: "all 0.2s",
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}
          onMouseOver={(e) => e.currentTarget.style.background = "#1a365d"}
          onMouseOut={(e) => e.currentTarget.style.background = "#0a2540"}
        >
          üìù Ouvrir dans Notion
        </a>
      )}
    </div>
  );

  // Calculer les statistiques de progression bas√©es sur les agents qui ont r√©ellement des briefs
  const workflowBriefs = briefs.filter(b => b.agent !== "PriorityBot");
  const workflowDeliverables = deliverables.filter(d => d.agent !== "PriorityBot");
  
  // Agents qui ont effectivement re√ßu des briefs (= agents actifs pour cette mission)
  const agentsWithBriefs = [...new Set(workflowBriefs.map(b => b.agent))];
  
  // Ajouter PriorityBot s'il a un brief (pour l'affichage, mais pas pour le calcul de progression)
  const allAgentsToDisplay = [...agentsWithBriefs];
  if (briefs.some(b => b.agent === "PriorityBot")) {
    allAgentsToDisplay.push("PriorityBot");
  }
  
  const totalAgents = agentsWithBriefs.length;
  const completedDeliverables = workflowDeliverables.length;
  const progressPercentage = totalAgents > 0 ? Math.round((completedDeliverables / totalAgents) * 100) : 0;

  // Composant Modal pour afficher les briefs
  const BriefModal = ({ brief, onClose }: { brief: Brief; onClose: () => void }) => {
    const agentInfo = AGENTS_INFO[brief.agent as keyof typeof AGENTS_INFO];
    const formattedContent = formatMarkdownContent(brief.contentJson);

    return (
      <div
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.6)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '20px'
        }}
        onClick={(e) => {
          if (e.target === e.currentTarget) {
            onClose();
          }
        }}
      >
        <div
          style={{
            background: 'white',
            borderRadius: 12,
            maxWidth: '800px',
            maxHeight: '80vh',
            width: '100%',
            overflow: 'hidden',
            boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
            position: 'relative'
          }}
        >
          {/* Header de la modal */}
          <div style={{
            background: `${agentInfo?.color || "#8898aa"}15`,
            padding: '20px 24px',
            borderBottom: '1px solid #e3e8ee',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>
              <div style={{
                fontSize: '24px'
              }}>
                {agentInfo?.emoji || "ü§ñ"}
              </div>
              <div>
                <div style={{
                  fontSize: '18px',
                  fontWeight: '600',
                  color: '#0a2540',
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  Brief pour {brief.agent}
                </div>
                <div style={{
                  fontSize: '14px',
                  color: '#8898aa',
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  {agentInfo?.role || "Agent"} ‚Ä¢ {new Date(brief.createdAt).toLocaleDateString('fr-FR')}
                </div>
              </div>
            </div>
            
            {/* Bouton fermer */}
            <button
              onClick={onClose}
              style={{
                background: 'transparent',
                border: 'none',
                fontSize: '24px',
                color: '#8898aa',
                cursor: 'pointer',
                padding: '8px',
                borderRadius: '6px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'all 0.2s'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#f6f9fc';
                e.currentTarget.style.color = '#425466';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'transparent';
                e.currentTarget.style.color = '#8898aa';
              }}
            >
              ‚úï
            </button>
          </div>

          {/* Contenu de la modal */}
          <div style={{
            padding: '24px',
            maxHeight: 'calc(80vh - 120px)',
            overflow: 'auto',
            fontSize: '14px',
            color: '#425466',
            lineHeight: '1.6',
            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
          }}>
            {formatAsHtml(formattedContent)}
          </div>
        </div>
      </div>
    );
  };

  return (
    <AuthGuard>
      <Layout
        title={mission.objective}
        subtitle={`Mission cr√©√©e le ${new Date(mission.createdAt).toLocaleDateString('fr-FR')}`}
        headerActions={headerActions}
      >
        {/* En-t√™te de la mission */}
        <div style={{
          background: "white",
          borderRadius: 8,
          padding: 32,
          marginBottom: 24,
          border: "1px solid #e3e8ee",
          boxShadow: "0 1px 3px rgba(16, 24, 40, 0.1)"
        }}>
          <div style={{
            display: "grid",
            gridTemplateColumns: "1fr auto auto",
            gap: 24,
            alignItems: "center",
            marginBottom: 24
          }}>
            {/* Statut et priorit√© */}
            <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
              <div style={{
                background: `${getStatusColor(mission.status)}15`,
                color: getStatusColor(mission.status),
                padding: "8px 16px",
                borderRadius: 6,
                fontSize: "13px",
                fontWeight: "600",
                textTransform: "uppercase",
                letterSpacing: "0.5px",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                {getStatusLabel(mission.status)}
              </div>
              {mission.priority && (
                <div style={{
                  background: `${getPriorityColor(mission.priority)}15`,
                  color: getPriorityColor(mission.priority),
                  padding: "8px 16px",
                  borderRadius: 6,
                  fontSize: "13px",
                  fontWeight: "600",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  Priorit√© {mission.priority}
                </div>
              )}
            </div>

            {/* Progression */}
            <div style={{
              display: "flex",
              alignItems: "center",
              gap: 12
            }}>
              <div style={{
                fontSize: "14px",
                color: "#425466",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                Progression
              </div>
              <div style={{
                width: 100,
                height: 8,
                background: "#f7f9fc",
                borderRadius: 4,
                overflow: "hidden"
              }}>
                <div style={{
                  width: `${progressPercentage}%`,
                  height: "100%",
                  background: progressPercentage === 100 ? "#00d924" : "#635bff",
                  borderRadius: 4,
                  transition: "width 0.3s"
                }} />
              </div>
              <div style={{
                fontSize: "14px",
                fontWeight: "600",
                color: "#0a2540",
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                {progressPercentage}%
              </div>
            </div>

            {/* Deadline */}
            {mission.deadline && (
              <div style={{
                textAlign: "right"
              }}>
                <div style={{
                  fontSize: "12px",
                  color: "#8898aa",
                  marginBottom: 4,
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  √âch√©ance
                </div>
                <div style={{
                  fontSize: "14px",
                  fontWeight: "600",
                  color: "#0a2540",
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  {new Date(mission.deadline).toLocaleDateString('fr-FR')}
                </div>
              </div>
            )}
          </div>

          {/* Contexte */}
          {mission.context && (
            <div style={{
              background: "#f7f9fc",
              borderRadius: 8,
              padding: 20,
              border: "1px solid #e3e8ee"
            }}>
              <h4 style={{
                fontSize: "14px",
                fontWeight: "600",
                color: "#0a2540",
                marginBottom: 8,
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                Contexte de la mission
              </h4>
              <p style={{
                fontSize: "14px",
                color: "#425466",
                lineHeight: "1.6",
                margin: 0,
                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
              }}>
                {mission.context}
              </p>
            </div>
          )}
        </div>

        {/* Onglets de navigation */}
        <div style={{
          background: "white",
          borderRadius: 8,
          border: "1px solid #e3e8ee",
          boxShadow: "0 1px 3px rgba(16, 24, 40, 0.1)",
          overflow: "hidden",
          marginBottom: 24
        }}>
          <div style={{
            display: "flex",
            borderBottom: "1px solid #e3e8ee"
          }}>
            {[
              { key: 'overview', label: 'Vue d\'ensemble', icon: 'üìã' },
              { key: 'briefs', label: 'Briefs agents', icon: 'üìù', count: briefs.length },
              { key: 'deliverables', label: 'Livrables', icon: 'üéØ', count: deliverables.length },
              { key: 'report', label: 'Rapport final', icon: 'üìä' }
            ].map((tab) => (
              <button
                key={tab.key}
                onClick={() => setActiveTab(tab.key as any)}
                style={{
                  flex: 1,
                  padding: "16px 20px",
                  background: activeTab === tab.key ? "#f7f9fc" : "transparent",
                  border: "none",
                  borderBottom: activeTab === tab.key ? "2px solid #635bff" : "2px solid transparent",
                  cursor: "pointer",
                  fontSize: "14px",
                  fontWeight: "500",
                  color: activeTab === tab.key ? "#635bff" : "#8898aa",
                  transition: "all 0.2s",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  gap: 8,
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}
                onMouseOver={(e) => {
                  if (activeTab !== tab.key) {
                    e.currentTarget.style.background = "#f7f9fc";
                    e.currentTarget.style.color = "#425466";
                  }
                }}
                onMouseOut={(e) => {
                  if (activeTab !== tab.key) {
                    e.currentTarget.style.background = "transparent";
                    e.currentTarget.style.color = "#8898aa";
                  }
                }}
              >
                <span>{tab.icon}</span>
                {tab.label}
                {tab.count !== undefined && (
                  <span style={{
                    background: activeTab === tab.key ? "#635bff" : "#e3e8ee",
                    color: activeTab === tab.key ? "white" : "#8898aa",
                    padding: "2px 8px",
                    borderRadius: 12,
                    fontSize: "12px",
                    fontWeight: "600"
                  }}>
                    {tab.count}
                  </span>
                )}
              </button>
            ))}
          </div>

          {/* Contenu des onglets */}
          <div style={{ padding: 32 }}>
            {activeTab === 'overview' && (
              <div>
                <h3 style={{
                  fontSize: "18px",
                  fontWeight: "600",
                  color: "#0a2540",
                  marginBottom: 24,
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  üìã Vue d'ensemble de la mission
                </h3>

                {/* Statistiques rapides */}
                <div style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                  gap: 20,
                  marginBottom: 32
                }}>
                  <div style={{
                    background: "#e0f7ff",
                    borderRadius: 8,
                    padding: 20,
                    textAlign: "center",
                    border: "1px solid #b3ecff"
                  }}>
                    <div style={{ fontSize: "32px", fontWeight: "700", color: "#0570de", marginBottom: 8 }}>
                      {briefs.length}
                    </div>
                    <div style={{
                      fontSize: "14px",
                      color: "#0570de",
                      fontWeight: "500",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      Agents mobilis√©s
                    </div>
                  </div>

                  <div style={{
                    background: "#e6ffe6",
                    borderRadius: 8,
                    padding: 20,
                    textAlign: "center",
                    border: "1px solid #b3ffb3"
                  }}>
                    <div style={{ fontSize: "32px", fontWeight: "700", color: "#00d924", marginBottom: 8 }}>
                      {deliverables.length}
                    </div>
                    <div style={{
                      fontSize: "14px",
                      color: "#00d924",
                      fontWeight: "500",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      Livrables produits
                    </div>
                  </div>

                  <div style={{
                    background: "#fff0e6",
                    borderRadius: 8,
                    padding: 20,
                    textAlign: "center",
                    border: "1px solid #ffd6b3"
                  }}>
                    <div style={{ fontSize: "32px", fontWeight: "700", color: "#f79009", marginBottom: 8 }}>
                      {progressPercentage}%
                    </div>
                    <div style={{
                      fontSize: "14px",
                      color: "#f79009",
                      fontWeight: "500",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      Progression
                    </div>
                  </div>

                  <div style={{
                    background: report ? "#e6ffe6" : "#f7f9fc",
                    borderRadius: 8,
                    padding: 20,
                    textAlign: "center",
                    border: `1px solid ${report ? "#b3ffb3" : "#e3e8ee"}`
                  }}>
                    <div style={{ 
                      fontSize: "32px", 
                      fontWeight: "700", 
                      color: report ? "#00d924" : "#8898aa", 
                      marginBottom: 8 
                    }}>
                      {report ? "‚úÖ" : "‚è≥"}
                    </div>
                    <div style={{
                      fontSize: "14px",
                      color: report ? "#00d924" : "#8898aa",
                      fontWeight: "500",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      {report ? "Rapport final" : "En attente"}
                    </div>
                  </div>
                </div>

                {/* Timeline des agents */}
                <div style={{
                  background: "#f7f9fc",
                  borderRadius: 8,
                  padding: 24,
                  border: "1px solid #e3e8ee"
                }}>
                  <h4 style={{
                    fontSize: "16px",
                    fontWeight: "600",
                    color: "#0a2540",
                    marginBottom: 20,
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                  }}>
                    üéØ √âquipe mobilis√©e
                  </h4>

                  <div style={{
                    display: "grid",
                    gap: 16
                  }}>
                    {allAgentsToDisplay.map(agentName => {
                      const info = AGENTS_INFO[agentName as keyof typeof AGENTS_INFO];
                      const hasBrief = briefs.some(b => b.agent === agentName);
                      const hasDeliverable = deliverables.some(d => d.agent === agentName);
                      const isPriorityBot = agentName === "PriorityBot";
                      
                      if (!info) return null; // Au cas o√π un agent ne serait pas dans AGENTS_INFO
                      
                      return (
                        <div key={agentName} style={{
                          display: "flex",
                          alignItems: "center",
                          gap: 16,
                          padding: "16px 20px",
                          background: isPriorityBot ? "#fff8e1" : "white",
                          borderRadius: 8,
                          border: isPriorityBot ? "1px solid #ffd54f" : "1px solid #e3e8ee",
                          opacity: hasBrief ? 1 : 0.6,
                          position: "relative"
                        }}>
                          <div style={{
                            width: 48,
                            height: 48,
                            borderRadius: 8,
                            background: `${info.color}15`,
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            fontSize: "20px",
                            border: `2px solid ${hasBrief ? info.color : "#e3e8ee"}`
                          }}>
                            {info.emoji}
                          </div>
                          
                          <div style={{ flex: 1 }}>
                            <div style={{
                              fontSize: "15px",
                              fontWeight: "600",
                              color: "#0a2540",
                              marginBottom: 4,
                              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                            }}>
                              {agentName}
                            </div>
                            <div style={{
                              fontSize: "13px",
                              color: "#8898aa",
                              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                            }}>
                              {info.specialty}
                            </div>
                          </div>

                          <div style={{
                            display: "flex",
                            gap: 8,
                            alignItems: "center"
                          }}>
                            {isPriorityBot && (
                              <span style={{
                                background: "#ff6b35",
                                color: "white",
                                padding: "2px 6px",
                                borderRadius: 4,
                                fontSize: "10px",
                                fontWeight: "600",
                                textTransform: "uppercase",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                              }}>
                                SYST√àME
                              </span>
                            )}
                            <div style={{
                              width: 8,
                              height: 8,
                              borderRadius: "50%",
                              background: hasBrief ? "#00d924" : "#e3e8ee"
                            }} />
                            <span style={{
                              fontSize: "12px",
                              color: hasBrief ? "#00d924" : "#8898aa",
                              fontWeight: "500",
                              fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                            }}>
                              {isPriorityBot && hasBrief ? "Priorit√© √©valu√©e" : 
                               hasDeliverable ? "Livrable produit" : 
                               hasBrief ? "Brief re√ßu" : "En attente"}
                            </span>
                          </div>

                          {/* Bouton de red√©marrage pour les agents workflow */}
                          {!isPriorityBot && hasBrief && (
                            <button
                              onClick={() => restartAgent(agentName)}
                              disabled={restarting === agentName}
                              style={{
                                background: restarting === agentName ? "#f6f9fc" : "#fff",
                                border: "1px solid #e3e8ee",
                                borderRadius: 6,
                                padding: "6px 10px",
                                fontSize: "11px",
                                color: restarting === agentName ? "#8898aa" : "#425466",
                                cursor: restarting === agentName ? "not-allowed" : "pointer",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                                display: "flex",
                                alignItems: "center",
                                gap: 4,
                                transition: "all 0.2s"
                              }}
                              onMouseEnter={(e) => {
                                if (restarting !== agentName) {
                                  e.currentTarget.style.background = "#f6f9fc";
                                  e.currentTarget.style.borderColor = "#d1d5db";
                                }
                              }}
                              onMouseLeave={(e) => {
                                if (restarting !== agentName) {
                                  e.currentTarget.style.background = "#fff";
                                  e.currentTarget.style.borderColor = "#e3e8ee";
                                }
                              }}
                            >
                              {restarting === agentName ? (
                                <>
                                  <span style={{ fontSize: "10px" }}>‚ü≥</span>
                                  Red√©marrage...
                                </>
                              ) : (
                                <>
                                  <span style={{ fontSize: "10px" }}>üîÑ</span>
                                  Red√©marrer
                                </>
                              )}
                            </button>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'briefs' && (
              <div>
                <h3 style={{
                  fontSize: "18px",
                  fontWeight: "600",
                  color: "#0a2540",
                  marginBottom: 24,
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  üìù Briefs distribu√©s aux agents
                </h3>

                {briefs.length === 0 ? (
                  <div style={{
                    textAlign: "center",
                    padding: 60,
                    color: "#8898aa"
                  }}>
                    <div style={{ fontSize: "48px", marginBottom: 16 }}>üìù</div>
                    <div style={{
                      fontSize: "16px",
                      marginBottom: 8,
                      fontWeight: "500",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      Aucun brief g√©n√©r√© pour le moment
                    </div>
                    <div style={{
                      fontSize: "14px",
                      color: "#8898aa",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      Les briefs appara√Ætront ici une fois la mission d√©coup√©e
                    </div>
                  </div>
                ) : (
                  <div style={{
                    display: "grid",
                    gap: 20
                  }}>
                    {briefs.map((brief) => {
                      const agentInfo = AGENTS_INFO[brief.agent as keyof typeof AGENTS_INFO];
                      return (
                        <div key={brief.id} id={`brief-${brief.id}`} style={{
                          background: "white",
                          border: "1px solid #e3e8ee",
                          borderRadius: 8,
                          transition: "box-shadow 0.3s ease",
                          overflow: "hidden"
                        }}>
                          <div style={{
                            background: `${agentInfo?.color || "#8898aa"}15`,
                            padding: "16px 20px",
                            borderBottom: "1px solid #e3e8ee",
                            display: "flex",
                            alignItems: "center",
                            gap: 12
                          }}>
                            <div style={{
                              fontSize: "20px"
                            }}>
                              {agentInfo?.emoji || "ü§ñ"}
                            </div>
                            <div>
                              <div style={{
                                fontSize: "15px",
                                fontWeight: "600",
                                color: "#0a2540",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                              }}>
                                Brief pour {brief.agent}
                              </div>
                              <div style={{
                                fontSize: "13px",
                                color: "#8898aa",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                              }}>
                                {agentInfo?.role || "Agent"} ‚Ä¢ {new Date(brief.createdAt).toLocaleDateString('fr-FR')}
                              </div>
                            </div>
                          </div>
                          
                          <div style={{ padding: "20px" }}>
                            {brief.contentJson && typeof brief.contentJson === 'object' ? (
                              <div style={{
                                fontSize: "14px",
                                color: "#425466",
                                lineHeight: "1.6",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                              }}>
                                {JSON.stringify(brief.contentJson, null, 2)}
                              </div>
                            ) : (
                              <div style={{
                                fontSize: "14px",
                                color: "#425466",
                                lineHeight: "1.6",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                              }}>
                                {brief.contentJson || "Brief en cours de g√©n√©ration..."}
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>
            )}

            {activeTab === 'deliverables' && (
              <div>
                <h3 style={{
                  fontSize: "18px",
                  fontWeight: "600",
                  color: "#0a2540",
                  marginBottom: 24,
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  üéØ Livrables des agents
                </h3>

                {deliverables.length === 0 ? (
                  <div style={{
                    textAlign: "center",
                    padding: 60,
                    color: "#8898aa"
                  }}>
                    <div style={{ fontSize: "48px", marginBottom: 16 }}>üéØ</div>
                    <div style={{
                      fontSize: "16px",
                      marginBottom: 8,
                      fontWeight: "500",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      Aucun livrable produit pour le moment
                    </div>
                    <div style={{
                      fontSize: "14px",
                      color: "#8898aa",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      Les livrables des agents appara√Ætront ici une fois leurs analyses termin√©es
                    </div>
                  </div>
                ) : (
                  <div style={{
                    display: "grid",
                    gap: 20
                  }}>
                    {deliverables.map((deliverable) => {
                      const agentInfo = AGENTS_INFO[deliverable.agent as keyof typeof AGENTS_INFO];
                      return (
                        <div key={deliverable.id} style={{
                          background: "white",
                          border: "1px solid #e3e8ee",
                          borderRadius: 8,
                          overflow: "hidden"
                        }}>
                          <div style={{
                            background: `${agentInfo?.color || "#8898aa"}15`,
                            padding: "16px 20px",
                            borderBottom: "1px solid #e3e8ee",
                            display: "flex",
                            alignItems: "center",
                            gap: 12
                          }}>
                            <div style={{
                              fontSize: "20px"
                            }}>
                              {agentInfo?.emoji || "ü§ñ"}
                            </div>
                            <div style={{ flex: 1 }}>
                              <div style={{
                                fontSize: "15px",
                                fontWeight: "600",
                                color: "#0a2540",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                              }}>
                                Livrable de {deliverable.agent}
                              </div>
                              <div style={{
                                fontSize: "13px",
                                color: "#8898aa",
                                fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                              }}>
                                {agentInfo?.role || "Agent"} ‚Ä¢ {new Date(deliverable.createdAt).toLocaleDateString('fr-FR')}
                              </div>
                            </div>
                            
                            {/* Bouton pour voir le brief contextuel */}
                            {(() => {
                              const relatedBrief = findRelatedBrief(deliverable, briefs);
                              return relatedBrief ? (
                                                            <button 
                              onClick={() => setSelectedBrief(relatedBrief)}
                                  style={{
                                    background: `${agentInfo?.color || '#635bff'}15`,
                                    border: `1px solid ${agentInfo?.color || '#635bff'}`,
                                    color: agentInfo?.color || '#635bff',
                                    padding: "6px 12px",
                                    borderRadius: 6,
                                    fontSize: "12px",
                                    fontWeight: "500",
                                    cursor: "pointer",
                                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                                  }}
                                >
                                  üìã Voir brief
                                </button>
                              ) : null;
                            })()}
                          </div>
                          
                          <div style={{ 
                            padding: "20px",
                            fontSize: "14px",
                            color: "#425466",
                            lineHeight: "1.6",
                            fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                          }}>
                            {(() => {
                              const formattedContent = formatMarkdownContent(deliverable.output);
                              return formattedContent ? formatAsHtml(formattedContent) : "Livrable en cours de g√©n√©ration...";
                            })()}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>
            )}

            {activeTab === 'report' && (
              <div>
                <h3 style={{
                  fontSize: "18px",
                  fontWeight: "600",
                  color: "#0a2540",
                  marginBottom: 24,
                  fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                }}>
                  üìä Rapport final de mission
                </h3>

                {!report ? (
                  <div style={{
                    textAlign: "center",
                    padding: 60,
                    color: "#8898aa"
                  }}>
                    <div style={{ fontSize: "48px", marginBottom: 16 }}>üìä</div>
                    <div style={{
                      fontSize: "16px",
                      marginBottom: 8,
                      fontWeight: "500",
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      {deliverables.length > 0 ? "Rapport final manquant" : "Rapport final en cours de compilation"}
                    </div>
                    <div style={{
                      fontSize: "14px",
                      color: "#8898aa",
                      marginBottom: deliverables.length > 0 ? 24 : 0,
                      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                    }}>
                      {deliverables.length > 0 
                        ? "Des livrables sont disponibles mais le rapport final n'a pas √©t√© g√©n√©r√©" 
                        : "Le rapport final sera disponible une fois tous les agents termin√©s"
                      }
                    </div>
                    
                    {/* Bouton de r√©g√©n√©ration si des livrables existent */}
                    {deliverables.length > 0 && (
                      <button
                        onClick={regenerateReport}
                        disabled={regeneratingReport}
                        style={{
                          background: regeneratingReport ? "#f6f9fc" : "#635bff",
                          color: regeneratingReport ? "#8898aa" : "white",
                          border: "none",
                          borderRadius: 8,
                          padding: "12px 24px",
                          fontSize: "14px",
                          fontWeight: "500",
                          cursor: regeneratingReport ? "not-allowed" : "pointer",
                          fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                          display: "flex",
                          alignItems: "center",
                          gap: 8,
                          margin: "0 auto",
                          transition: "all 0.2s"
                        }}
                        onMouseEnter={(e) => {
                          if (!regeneratingReport) {
                            e.currentTarget.style.background = "#5a52e8";
                          }
                        }}
                        onMouseLeave={(e) => {
                          if (!regeneratingReport) {
                            e.currentTarget.style.background = "#635bff";
                          }
                        }}
                      >
                        {regeneratingReport ? (
                          <>
                            <span style={{ fontSize: "12px" }}>‚ü≥</span>
                            G√©n√©ration en cours...
                          </>
                        ) : (
                          <>
                            <span style={{ fontSize: "12px" }}>üîÑ</span>
                            G√©n√©rer le rapport final
                          </>
                        )}
                      </button>
                    )}
                  </div>
                ) : (
                  <div style={{
                    background: "white",
                    border: "1px solid #e3e8ee",
                    borderRadius: 8,
                    overflow: "hidden"
                  }}>
                    <div style={{
                      background: "#e6ffe6",
                      padding: "16px 20px",
                      borderBottom: "1px solid #e3e8ee",
                      display: "flex",
                      alignItems: "center",
                      gap: 12
                    }}>
                      <div style={{ fontSize: "20px" }}>üìä</div>
                      <div>
                        <div style={{
                          fontSize: "15px",
                          fontWeight: "600",
                          color: "#0a2540",
                          fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                        }}>
                          Rapport Final Compil√©
                        </div>
                        <div style={{
                          fontSize: "13px",
                          color: "#8898aa",
                          fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                        }}>
                          G√©n√©r√© le {new Date(report.createdAt).toLocaleDateString('fr-FR')}
                        </div>
                      </div>
                    </div>
                    
                    <div style={{ padding: "20px" }}>
                      <div style={{
                        fontSize: "14px",
                        color: "#425466",
                        lineHeight: "1.6",
                        fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                      }}>
                        {report.detailsMd ? formatAsHtml(report.detailsMd) : "Rapport final disponible"}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </Layout>
      
      {/* Modal pour afficher les briefs */}
      {selectedBrief && (
        <BriefModal 
          brief={selectedBrief} 
          onClose={() => setSelectedBrief(null)} 
        />
      )}
    </AuthGuard>
  );
}