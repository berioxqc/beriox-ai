import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "../../auth/[...nextauth]/route";
import { callJson } from "@/lib/openai";
import { PlanService } from "@/lib/plans";
import { prisma } from "@/lib/prisma";

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: "Non authentifi√©" }, { status: 401 });
    }

    // R√©cup√©rer les informations utilisateur et plan
    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      include: {
        premiumAccess: true
      }
    });

    if (!user) {
      return NextResponse.json({ error: "Utilisateur introuvable" }, { status: 404 });
    }

    // D√©terminer le plan effectif (avec acc√®s premium temporaire)
    const basePlan = user.planId || 'apos;free'apos;;
    const effectivePlan = PlanService.getEffectivePlan(basePlan, user.premiumAccess);
    const canUseGPT = PlanService.canUseGPTQuestions(effectivePlan);
    const hasPremiumAccess = PlanService.hasPremiumAccess(user.premiumAccess);

    const body = await req.json();
    const { objective } = body;

    if (!objective || objective.trim().length === 0) {
      return NextResponse.json({ error: "Objectif de mission requis" }, { status: 400 });
    }

    // Si l'apos;utilisateur ne peut pas utiliser GPT, retourner des questions g√©n√©riques
    if (!canUseGPT) {
      console.log(`üö´ Utilisateur ${user.email} (plan: ${effectivePlan}, premium: ${hasPremiumAccess}) - Questions GPT non autoris√©es`);
      
      const genericQuestions = [
        {
          label: "üí° Dans quel contexte avez-vous besoin d'apos;aide ?",
          placeholder: "Ex: Pour mon site web, client sp√©cifique, projet urgent..."
        },
        {
          label: "üë• Pour qui est-ce destin√© ?",
          placeholder: "Ex: Mes visiteurs, clients de ma boutique, mon √©quipe..."
        },
        {
          label: "‚è±Ô∏è Y a-t-il des contraintes √† savoir ?",
          placeholder: "Ex: √Ä faire rapidement, style particulier, budget serr√©..."
        }
      ];

      return NextResponse.json({ 
        questions: genericQuestions,
        isPremium: false,
        upgradeMessage: "D√©bloquez les questions GPT personnalis√©es avec un plan payant !",
        upgradeUrl: "/pricing"
      });
    }

    console.log(`‚úÖ Utilisateur ${user.email} (plan: ${effectivePlan}, premium: ${hasPremiumAccess}) - Questions GPT autoris√©es`);

    // Prompt pour GPT afin de g√©n√©rer 3 questions d'apos;alignement personnalis√©es
    const prompt = `Analyse cette demande de mission et g√©n√®re exactement 3 questions d'apos;alignement strat√©giques pour mieux comprendre le besoin du client.

MISSION: "${objective}"

INSTRUCTIONS:
- G√©n√®re 3 questions courtes, pr√©cises et pertinentes
- Chaque question doit aider √† clarifier un aspect diff√©rent du besoin
- Questions orient√©es action et r√©sultats concrets
- Ton professionnel mais accessible
- √âvite les questions trop g√©n√©riques

FORMAT REQUIS (JSON strict):
{
  "questions": [
    {
      "label": "üéØ [Question courte et directe]",
      "placeholder": "Ex: [exemple de r√©ponse concr√®te]"
    },
    {
      "label": "üìã [Question sur le contexte/contraintes]",
      "placeholder": "Ex: [exemple de contrainte ou contexte]"
    },
    {
      "label": "‚ú® [Question sur l'apos;objectif ou r√©sultat attendu]",
      "placeholder": "Ex: [exemple de r√©sultat souhait√©]"
    }
  ]
}

EXEMPLES DE BONNES QUESTIONS:
- "üéØ Quel est le probl√®me principal que cela doit r√©soudre ?"
- "üìã Y a-t-il des contraintes techniques ou budg√©taires ?"
- "‚ú® √Ä quoi ressemblera le succ√®s pour vous ?"

G√©n√®re maintenant 3 questions sp√©cifiques pour cette mission.`;

    // Appel √† OpenAI
    const response = await callJson({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "Tu es un expert en analyse de besoins clients. Tu g√©n√®res des questions d'apos;alignement pr√©cises et pertinentes pour mieux comprendre les demandes. R√©ponds UNIQUEMENT en JSON valide."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 800
    });

    // Validation de la r√©ponse
    if (!response.questions || !Array.isArray(response.questions) || response.questions.length !== 3) {
      console.error('apos;R√©ponse GPT invalide:'apos;, response);
      
      // Questions de fallback si GPT √©choue
      const fallbackQuestions = [
        {
          label: "üéØ Quel est l'apos;objectif principal de cette demande ?",
          placeholder: "Ex: Augmenter les ventes, am√©liorer l'apos;efficacit√©, r√©soudre un probl√®me..."
        },
        {
          label: "üìã Dans quel contexte ou avec quelles contraintes ?",
          placeholder: "Ex: Budget limit√©, d√©lai serr√©, √©quipe r√©duite, public sp√©cifique..."
        },
        {
          label: "‚ú® Comment saurez-vous que c'apos;est r√©ussi ?",
          placeholder: "Ex: M√©triques pr√©cises, feedback positif, objectif atteint..."
        }
      ];

      return NextResponse.json({ questions: fallbackQuestions });
    }

    // Validation des questions individuelles
    const validatedQuestions = response.questions.map((q: any, index: number) => {
      if (!q.label || !q.placeholder) {
        return {
          label: `üéØ Question ${index + 1} sur votre besoin`,
          placeholder: "D√©crivez votre besoin sp√©cifique..."
        };
      }
      return {
        label: q.label.substring(0, 100), // Limite la longueur
        placeholder: q.placeholder.substring(0, 150)
      };
    });

    console.log('apos;‚úÖ Questions GPT g√©n√©r√©es pour mission:'apos;, objective.substring(0, 50) + 'apos;...'apos;);
    
    return NextResponse.json({ 
      questions: validatedQuestions,
      isPremium: true,
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('apos;Erreur g√©n√©ration questions:'apos;, error);
    
    // Questions de fallback en cas d'apos;erreur
    const fallbackQuestions = [
      {
        label: "üéØ Quel est votre objectif principal ?",
        placeholder: "Ex: Cr√©er du contenu, r√©soudre un probl√®me, am√©liorer un processus..."
      },
      {
        label: "üìã Quelles sont vos contraintes ?",
        placeholder: "Ex: D√©lai, budget, ressources, public cible..."
      },
      {
        label: "‚ú® Quel r√©sultat esp√©rez-vous ?",
        placeholder: "Ex: Augmentation des ventes, gain de temps, meilleure visibilit√©..."
      }
    ];

    return NextResponse.json({ 
      questions: fallbackQuestions,
      isPremium: false,
      fallback: true,
      error: "Utilisation des questions par d√©faut"
    });
  }
}
