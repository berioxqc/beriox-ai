#!/usr/bin/env node

/**
 * Script de test pour l'Optimisation des Formulaires - Beriox AI
 */

const https = require('https');
const http = require('http');
const fs = require('fs');

const BASE_URL = process.env.TEST_URL || 'http://localhost:3000';
const TEST_TIMEOUT = 10000;

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

const log = {
  header: (msg) => console.log(`\n${colors.cyan}${colors.bright}${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  test: (msg) => console.log(`${colors.magenta}üß™ ${msg}${colors.reset}`)
};

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https://');
    const client = isHttps ? https : http;
    
    const requestOptions = {
      timeout: TEST_TIMEOUT,
      ...options
    };

    const req = client.request(url, requestOptions, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    req.on('timeout', () => reject(new Error('Request timeout')));
    
    if (options.body) {
      req.write(options.body);
    }
    req.end();
  });
}

async function testFormOptimizationAPI() {
  log.test('Test des endpoints API Form Optimization');
  
  const tests = [
    {
      name: 'GET forms (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=forms`,
      method: 'GET',
      expectedStatus: 401
    },
    {
      name: 'POST start form (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=start`,
      method: 'POST',
      body: JSON.stringify({ formId: 'contact-form' }),
      expectedStatus: 401
    },
    {
      name: 'PUT update form data (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=update`,
      method: 'PUT',
      body: JSON.stringify({ sessionId: 'test', fieldId: 'name', value: 'test' }),
      expectedStatus: 401
    },
    {
      name: 'POST validate form (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=validate`,
      method: 'POST',
      body: JSON.stringify({ sessionId: 'test' }),
      expectedStatus: 401
    },
    {
      name: 'POST submit form (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=submit`,
      method: 'POST',
      body: JSON.stringify({ sessionId: 'test' }),
      expectedStatus: 401
    },
    {
      name: 'POST save draft (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=save-draft`,
      method: 'POST',
      body: JSON.stringify({ sessionId: 'test' }),
      expectedStatus: 401
    },
    {
      name: 'POST abandon form (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=abandon`,
      method: 'POST',
      body: JSON.stringify({ sessionId: 'test' }),
      expectedStatus: 401
    },
    {
      name: 'GET analytics (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=analytics&formId=contact-form`,
      method: 'GET',
      expectedStatus: 401
    },
    {
      name: 'POST optimizations (non authentifi√©)',
      url: `${BASE_URL}/api/form-optimization?action=optimizations`,
      method: 'POST',
      body: JSON.stringify({ formId: 'contact-form' }),
      expectedStatus: 401
    }
  ];

  let passed = 0;
  let total = tests.length;

  for (const test of tests) {
    try {
      const response = await makeRequest(test.url, {
        method: test.method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: test.body
      });

      if (response.status === test.expectedStatus) {
        log.success(`${test.name} - ${response.status}`);
        passed++;
      } else {
        log.error(`${test.name} - Expected ${test.expectedStatus}, got ${response.status}`);
      }
    } catch (error) {
      log.error(`${test.name} - Error: ${error.message}`);
    }
  }

  return { success: passed === total, passed, total };
}

async function testFormOptimizationSystem() {
  log.test('Test du syst√®me Form Optimization');
  
  const files = [
    'src/lib/form-optimization.ts',
    'src/app/api/form-optimization/route.ts',
    'src/components/FormOptimizer.tsx'
  ];

  const requiredClasses = [
    'FormOptimizer',
    'FormFieldType',
    'ValidationRule',
    'FormField',
    'FormConfig',
    'FormData',
    'FormAnalytics',
    'FormOptimization'
  ];

  const requiredMethods = [
    'addForm',
    'getForm',
    'startForm',
    'updateFormData',
    'validateForm',
    'submitForm',
    'saveDraft',
    'abandonForm',
    'getFormAnalytics',
    'generateOptimizations'
  ];

  let found = 0;
  let total = files.length + requiredClasses.length + requiredMethods.length;

  // V√©rifier l'existence des fichiers
  for (const file of files) {
    if (fs.existsSync(file)) {
      log.success(`Fichier trouv√©: ${file}`);
      found++;
    } else {
      log.error(`Fichier manquant: ${file}`);
    }
  }

  // V√©rifier le contenu du fichier principal
  try {
    const formOptimizationContent = fs.readFileSync('src/lib/form-optimization.ts', 'utf8');
    
    // V√©rifier les classes
    for (const className of requiredClasses) {
      if (formOptimizationContent.includes(className)) {
        log.success(`Classe trouv√©e: ${className}`);
        found++;
      } else {
        log.error(`Classe manquante: ${className}`);
      }
    }

    // V√©rifier les m√©thodes
    for (const methodName of requiredMethods) {
      if (formOptimizationContent.includes(methodName)) {
        log.success(`M√©thode trouv√©e: ${methodName}`);
        found++;
      } else {
        log.error(`M√©thode manquante: ${methodName}`);
      }
    }
  } catch (error) {
    log.error(`Erreur lors de la lecture du fichier: ${error.message}`);
  }

  return { success: found === total, found, total };
}

async function testFormOptimizationFeatures() {
  log.test('Test des fonctionnalit√©s Form Optimization');
  
  const features = [
    'Timer simple',
    'Saisie manuelle',
    'Multi-devices',
    'Mode hors-ligne',
    'Reminders',
    'Timesheet Approvals',
    'Activity Log',
    'Calendrier int√©gr√©',
    'Validation automatique',
    'Rapports visuels',
    'Rapports personnalis√©s',
    'Analytics avanc√©s',
    'Export automatis√©',
    'Suivi budgets',
    'Gestion capacit√©',
    'Alertes intelligentes',
    'Forecasting',
    'Suivi d√©penses',
    'D√©penses facturables',
    'Multi-currency',
    'Upload re√ßus',
    'Cr√©ation invoices',
    'Facturation int√©gr√©e',
    'Customisation invoices',
    'Suivi paiements',
    'Tableau de Gantt',
    'Kanban boards',
    'Roadmaps',
    'D√©pendances',
    'Screenshots',
    'Surveillance √©cran',
    'Productivity tracking',
    'Idle detection',
    'UI √©pur√©e',
    'Responsive design',
    'Dark mode',
    'Accessibilit√©',
    'Calendriers',
    'Project management',
    'Accounting',
    'Communication',
    'Plan Basic',
    'Plan Professional',
    'Plan Enterprise',
    'Plan Custom'
  ];

  let found = 0;
  let total = features.length;

  try {
    const timeTrackingContent = fs.readFileSync('src/lib/time-tracking.ts', 'utf8');
    
    for (const feature of features) {
      if (timeTrackingContent.includes(feature)) {
        log.success(`Fonctionnalit√© trouv√©e: ${feature}`);
        found++;
      } else {
        log.error(`Fonctionnalit√© manquante: ${feature}`);
      }
    }
  } catch (error) {
    log.error(`Erreur lors de la lecture du fichier: ${error.message}`);
  }

  return { success: found >= total * 0.8, found, total };
}

async function testFormOptimizationComponents() {
  log.test('Test des composants Form Optimization');
  
  const requiredComponents = [
    'FormOptimizer',
    'useSession',
    'useState',
    'useEffect',
    'FontAwesomeIcon'
  ];

  const requiredUIElements = [
    'form-field',
    'active',
    'error',
    'progress',
    'analytics',
    'optimization',
    'suggestions',
    'aBTestVariants'
  ];

  let found = 0;
  let total = requiredComponents.length + requiredUIElements.length;

  try {
    const componentContent = fs.readFileSync('src/components/FormOptimizer.tsx', 'utf8');
    
    // V√©rifier les composants React
    for (const component of requiredComponents) {
      if (componentContent.includes(component)) {
        log.success(`Composant trouv√©: ${component}`);
        found++;
      } else {
        log.error(`Composant manquant: ${component}`);
      }
    }

    // V√©rifier les √©l√©ments UI
    for (const element of requiredUIElements) {
      if (componentContent.includes(element)) {
        log.success(`√âl√©ment UI trouv√©: ${element}`);
        found++;
      } else {
        log.error(`√âl√©ment UI manquant: ${element}`);
      }
    }
  } catch (error) {
    log.error(`Erreur lors de la lecture du fichier: ${error.message}`);
  }

  return { success: found >= total * 0.8, found, total };
}

async function testFormOptimizationDataStructures() {
  log.test('Test des structures de donn√©es Form Optimization');
  
  const requiredFields = [
    'id: string',
    'name: string',
    'type: FormFieldType',
    'label: string',
    'required?: boolean',
    'validation?: ValidationRule[]',
    'helpText?: string',
    'order: number',
    'fields: FormField[]',
    'autoSave?: boolean',
    'showProgress?: boolean',
    'allowDraft?: boolean',
    'sessionId: string',
    'data: Record<string, any>',
    'progress: number',
    'errors: Record<string, string[]>',
    'totalStarts: number',
    'totalCompletions: number',
    'completionRate: number',
    'abandonmentRate: number',
    'suggestions: Array<',
    'aBTestVariants: Array<',
    'priority: \'low\' | \'medium\' | \'high\'',
    'impact: number'
  ];

  let found = 0;
  let total = requiredFields.length;

  try {
    const formOptimizationContent = fs.readFileSync('src/lib/form-optimization.ts', 'utf8');
    
    for (const field of requiredFields) {
      if (formOptimizationContent.includes(field)) {
        log.success(`Champ trouv√©: ${field}`);
        found++;
      } else {
        log.error(`Champ manquant: ${field}`);
      }
    }
  } catch (error) {
    log.error(`Erreur lors de la lecture du fichier: ${error.message}`);
  }

  return { success: found >= total * 0.8, found, total };
}

async function runFormOptimizationTests() {
  log.header('üé® Tests Form Optimization Beriox AI');
  const startTime = Date.now();
  
  try {
    const apiResult = await testFormOptimizationAPI();
    const systemResult = await testFormOptimizationSystem();
    const featuresResult = await testFormOptimizationFeatures();
    const componentsResult = await testFormOptimizationComponents();
    const dataStructuresResult = await testFormOptimizationDataStructures();

    const totalTests = 5; // API, System, Features, Components, Data Structures
    const passedTests = [
      apiResult.success,
      systemResult.success,
      featuresResult.success,
      componentsResult.success,
      dataStructuresResult.success
    ].filter(Boolean).length;

    const duration = Date.now() - startTime;

    log.header('üìä R√©sultats Finaux');
    log.info(`Dur√©e: ${duration}ms`);
    log.info(`Tests r√©ussis: ${passedTests}/${totalTests}`);

    log.info('\nüìã D√©tails:');
    log.info(`üé® API: ${apiResult.success ? '‚úÖ' : '‚ùå'} (${apiResult.passed}/${apiResult.total})`);
    log.info(`üìù Syst√®me: ${systemResult.success ? '‚úÖ' : '‚ùå'} (${systemResult.found}/${systemResult.total})`);
    log.info(`üéØ Fonctionnalit√©s: ${featuresResult.success ? '‚úÖ' : '‚ùå'} (${featuresResult.found}/${featuresResult.total})`);
    log.info(`üé® Composants: ${componentsResult.success ? '‚úÖ' : '‚ùå'} (${componentsResult.found}/${componentsResult.total})`);
    log.info(`üóÇÔ∏è Structures: ${dataStructuresResult.success ? '‚úÖ' : '‚ùå'} (${dataStructuresResult.found}/${dataStructuresResult.total})`);

    const successRate = ((passedTests / totalTests) * 100).toFixed(1);
    if (successRate >= 80) {
      log.success(`Taux de succ√®s: ${successRate}% - Form Optimization fonctionnel!`);
    } else {
      log.warning(`Taux de succ√®s: ${successRate}% - Form Optimization partiellement fonctionnel`);
    }

    const results = {
      timestamp: new Date().toISOString(),
      duration: duration,
      totalTests: totalTests,
      passedTests: passedTests,
      successRate: parseFloat(successRate),
      details: {
        api: {
          success: apiResult.success,
          passed: apiResult.passed,
          total: apiResult.total
        },
        system: {
          success: systemResult.success,
          found: systemResult.found,
          total: systemResult.total
        },
        features: {
          success: featuresResult.success,
          found: featuresResult.found,
          total: featuresResult.total
        },
        components: {
          success: componentsResult.success,
          found: componentsResult.found,
          total: componentsResult.total
        },
        dataStructures: {
          success: dataStructuresResult.success,
          found: dataStructuresResult.found,
          total: dataStructuresResult.total
        }
      }
    };

    fs.writeFileSync('form-optimization-test-report.json', JSON.stringify(results, null, 2));
    log.info('Rapport sauvegard√© dans form-optimization-test-report.json');

    process.exit(passedTests < 4 ? 1 : 0);

  } catch (error) {
    log.error(`Erreur: ${error.message}`);
    process.exit(1);
  }
}

if (require.main === module) {
  runFormOptimizationTests();
}

module.exports = {
  runFormOptimizationTests,
  testFormOptimizationAPI,
  testFormOptimizationSystem,
  testFormOptimizationFeatures,
  testFormOptimizationComponents,
  testFormOptimizationDataStructures
};
