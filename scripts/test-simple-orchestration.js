#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSimpleOrchestration() {
  console.log('üß™ Test simple du syst√®me d\'orchestration...\n');
  
  try {
    // 1. Cr√©er une mission de test
    console.log('1Ô∏è‚É£ Cr√©ation d\'une mission de test...');
    const testMission = await prisma.mission.create({
      data: {
        objective: "Cr√©er une strat√©gie marketing pour une startup tech",
        context: "Startup dans le domaine de l'IA, budget limit√©, cible B2B",
        priority: "high",
        source: "test",
        status: "received"
      }
    });
    console.log(`‚úÖ Mission cr√©√©e: ${testMission.id}`);

    // 2. Cr√©er un utilisateur de test
    console.log('\n2Ô∏è‚É£ Cr√©ation d\'un utilisateur de test...');
    const testUser = await prisma.user.create({
      data: {
        email: "test@orchestration.com",
        name: "Test User",
        role: "USER"
      }
    });
    console.log(`‚úÖ Utilisateur cr√©√©: ${testUser.id}`);

    // 3. Associer la mission √† l'utilisateur
    console.log('\n3Ô∏è‚É£ Association mission-utilisateur...');
    await prisma.mission.update({
      where: { id: testMission.id },
      data: { userId: testUser.id }
    });
    console.log('‚úÖ Mission associ√©e √† l\'utilisateur');

    // 4. Cr√©er des briefs pour les agents
    console.log('\n4Ô∏è‚É£ Cr√©ation des briefs pour les agents...');
    const agents = ["KarineAI", "HugoAI", "JPBot", "ElodieAI"];
    
    for (const agent of agents) {
      await prisma.brief.create({
        data: {
          missionId: testMission.id,
          agent,
          contentJson: {
            brief: `Brief pour ${agent} - Mission: ${testMission.objective}`,
            status: "queued",
            createdAt: new Date().toISOString()
          },
          status: "queued"
        }
      });
      console.log(`‚úÖ Brief cr√©√© pour ${agent}`);
    }

    // 5. Cr√©er un plan d'orchestration simple
    console.log('\n5Ô∏è‚É£ Cr√©ation du plan d\'orchestration...');
    const orchestrationPlan = await prisma.orchestrationPlan.create({
      data: {
        missionId: testMission.id,
        agents: agents,
        workflow: JSON.stringify([
          {
            step: 1,
            agentId: "KarineAI",
            action: "Analyser la strat√©gie marketing",
            dependencies: [],
            estimatedTime: 45,
            critical: true
          },
          {
            step: 2,
            agentId: "HugoAI", 
            action: "D√©velopper les solutions techniques",
            dependencies: [1],
            estimatedTime: 60,
            critical: true
          },
          {
            step: 3,
            agentId: "JPBot",
            action: "Analyser les donn√©es et optimiser",
            dependencies: [1, 2],
            estimatedTime: 30,
            critical: false
          },
          {
            step: 4,
            agentId: "ElodieAI",
            action: "Cr√©er le contenu optimis√©",
            dependencies: [1, 2],
            estimatedTime: 40,
            critical: true
          }
        ]),
        estimatedDuration: 175,
        confidence: 85,
        risks: ["D√©lai serr√©", "Budget limit√©"],
        alternatives: JSON.stringify([
          ["KarineAI", "ClaraLaCloseuse"],
          ["HugoAI", "FauconLeMaitreFocus"]
        ]),
        status: "created"
      }
    });
    console.log('‚úÖ Plan d\'orchestration cr√©√©');

    // 6. V√©rifier les donn√©es cr√©√©es
    console.log('\n6Ô∏è‚É£ V√©rification des donn√©es...');
    const briefs = await prisma.brief.findMany({
      where: { missionId: testMission.id }
    });
    console.log(`‚úÖ ${briefs.length} briefs trouv√©s`);

    const plan = await prisma.orchestrationPlan.findFirst({
      where: { missionId: testMission.id }
    });
    console.log(`‚úÖ Plan d'orchestration trouv√©: ${plan ? 'Oui' : 'Non'}`);

    // 7. Simuler l'ex√©cution
    console.log('\n7Ô∏è‚É£ Simulation de l\'ex√©cution...');
    await prisma.mission.update({
      where: { id: testMission.id },
      data: { status: "in_progress" }
    });
    console.log('‚úÖ Mission mise en cours');

    // Cr√©er des livrables simul√©s
    for (const agent of agents) {
      await prisma.deliverable.create({
        data: {
          missionId: testMission.id,
          agent,
          output: {
            content: `Livrable de ${agent} pour la mission: ${testMission.objective}`,
            status: "completed",
            quality: "high",
            createdAt: new Date().toISOString()
          }
        }
      });
      console.log(`‚úÖ Livrable cr√©√© pour ${agent}`);
    }

    // 8. Finaliser la mission
    console.log('\n8Ô∏è‚É£ Finalisation de la mission...');
    await prisma.mission.update({
      where: { id: testMission.id },
      data: { status: "completed" }
    });
    console.log('‚úÖ Mission finalis√©e');

    // 9. Nettoyage
    console.log('\n9Ô∏è‚É£ Nettoyage des donn√©es de test...');
    await prisma.deliverable.deleteMany({
      where: { missionId: testMission.id }
    });
    await prisma.brief.deleteMany({
      where: { missionId: testMission.id }
    });
    await prisma.orchestrationPlan.deleteMany({
      where: { missionId: testMission.id }
    });
    await prisma.mission.delete({
      where: { id: testMission.id }
    });
    await prisma.user.delete({
      where: { id: testUser.id }
    });
    console.log('‚úÖ Donn√©es de test nettoy√©es');

    console.log('\nüéâ Test simple termin√© avec succ√®s !');
    console.log('\nüìä R√©sum√©:');
    console.log('- ‚úÖ Mission cr√©√©e et g√©r√©e');
    console.log('- ‚úÖ Briefs g√©n√©r√©s pour 4 agents');
    console.log('- ‚úÖ Plan d\'orchestration cr√©√©');
    console.log('- ‚úÖ Livrables simul√©s');
    console.log('- ‚úÖ Workflow complet test√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  testSimpleOrchestration();
}

module.exports = { testSimpleOrchestration };
