#!/bin/bash

# üöÄ Script de D√©ploiement Rapide Beriox AI
# D√©tection d'erreurs et monitoring en temps r√©el

set -e  # Arr√™ter sur la premi√®re erreur

# Configuration
PROJECT_NAME="beriox-ai"
DEPLOYMENT_TIMEOUT=300  # 5 minutes
HEALTH_CHECK_INTERVAL=10  # 10 secondes
MAX_HEALTH_CHECK_ATTEMPTS=30  # 5 minutes max

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        log_error "npm n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Vercel CLI
    if ! command -v vercel &> /dev/null; then
        log_warning "Vercel CLI n'est pas install√©, installation..."
        npm install -g vercel
    fi
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        log_error "Git n'est pas install√©"
        exit 1
    fi
    
    log_success "Tous les pr√©requis sont satisfaits"
}

# V√©rification de l'√©tat du repository
check_repository_status() {
    log_info "V√©rification de l'√©tat du repository..."
    
    # V√©rifier s'il y a des changements non commit√©s
    if [[ -n $(git status --porcelain) ]]; then
        log_warning "Il y a des changements non commit√©s"
        read -p "Voulez-vous les commiter avant le d√©ploiement? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "üöÄ Auto-commit avant d√©ploiement - $(date)"
        else
            log_error "D√©ploiement annul√© - changements non commit√©s"
            exit 1
        fi
    fi
    
    # V√©rifier s'il y a des commits non pouss√©s
    if [[ -n $(git log --oneline origin/main..HEAD) ]]; then
        log_info "Poussage des commits vers GitHub..."
        git push origin main
    fi
    
    log_success "Repository √† jour"
}

# Tests pr√©-d√©ploiement
run_pre_deployment_tests() {
    log_info "Ex√©cution des tests pr√©-d√©ploiement..."
    
    # Tests unitaires
    log_info "Tests unitaires..."
    if ! npm run test:coverage; then
        log_error "Tests unitaires √©chou√©s"
        exit 1
    fi
    
    # Linting
    log_info "V√©rification du code..."
    if ! npm run lint; then
        log_error "Linting √©chou√©"
        exit 1
    fi
    
    # Build test
    log_info "Test de build..."
    if ! npm run build; then
        log_error "Build √©chou√©"
        exit 1
    fi
    
    log_success "Tous les tests pr√©-d√©ploiement sont pass√©s"
}

# D√©ploiement
deploy() {
    log_info "D√©marrage du d√©ploiement..."
    
    # D√©ploiement sur Vercel
    log_info "D√©ploiement sur Vercel..."
    DEPLOYMENT_URL=$(vercel --prod --yes 2>&1 | grep -o 'https://[^[:space:]]*' | head -1)
    
    if [[ -z "$DEPLOYMENT_URL" ]]; then
        log_error "√âchec du d√©ploiement - URL non trouv√©e"
        exit 1
    fi
    
    log_success "D√©ploiement termin√©: $DEPLOYMENT_URL"
    echo "$DEPLOYMENT_URL" > .deployment_url
    
    # Attendre que le d√©ploiement soit actif
    log_info "Attente de l'activation du d√©ploiement..."
    sleep 30
}

# V√©rification de sant√©
health_check() {
    local url=$1
    local attempt=1
    
    log_info "V√©rification de sant√© du d√©ploiement..."
    
    while [[ $attempt -le $MAX_HEALTH_CHECK_ATTEMPTS ]]; do
        log_info "Tentative $attempt/$MAX_HEALTH_CHECK_ATTEMPTS..."
        
        # V√©rification de base
        if curl -f -s "$url/api/health" > /dev/null; then
            log_success "Health check r√©ussi"
            return 0
        fi
        
        # V√©rification d√©taill√©e si la base √©choue
        if curl -f -s "$url/api/health/advanced" > /dev/null; then
            log_success "Health check avanc√© r√©ussi"
            return 0
        fi
        
        log_warning "Health check √©chou√©, nouvelle tentative dans $HEALTH_CHECK_INTERVAL secondes..."
        sleep $HEALTH_CHECK_INTERVAL
        ((attempt++))
    done
    
    log_error "Health check √©chou√© apr√®s $MAX_HEALTH_CHECK_ATTEMPTS tentatives"
    return 1
}

# Tests post-d√©ploiement
run_post_deployment_tests() {
    local url=$1
    
    log_info "Ex√©cution des tests post-d√©ploiement..."
    
    # Tests de fum√©e
    log_info "Tests de fum√©e..."
    if ! curl -f -s "$url" > /dev/null; then
        log_error "Test de fum√©e √©chou√© - page d'accueil inaccessible"
        return 1
    fi
    
    # Tests d'API
    log_info "Tests d'API..."
    if ! curl -f -s "$url/api/health" > /dev/null; then
        log_error "Test d'API √©chou√© - endpoint health inaccessible"
        return 1
    fi
    
    # Tests de performance
    log_info "Tests de performance..."
    local response_time=$(curl -w "%{time_total}" -o /dev/null -s "$url/api/health")
    if (( $(echo "$response_time > 5" | bc -l) )); then
        log_warning "Temps de r√©ponse √©lev√©: ${response_time}s"
    else
        log_success "Temps de r√©ponse acceptable: ${response_time}s"
    fi
    
    log_success "Tous les tests post-d√©ploiement sont pass√©s"
    return 0
}

# Monitoring en temps r√©el
start_monitoring() {
    local url=$1
    
    log_info "D√©marrage du monitoring en temps r√©el..."
    
    # Monitoring pendant 5 minutes
    local monitoring_duration=300
    local start_time=$(date +%s)
    
    while [[ $(($(date +%s) - start_time)) -lt $monitoring_duration ]]; do
        local current_time=$(date '+%H:%M:%S')
        
        # V√©rification de sant√©
        if curl -f -s "$url/api/health" > /dev/null 2>&1; then
            echo -e "${GREEN}[$current_time] ‚úÖ Service op√©rationnel${NC}"
        else
            echo -e "${RED}[$current_time] ‚ùå Service d√©faillant${NC}"
        fi
        
        # V√©rification des performances
        local response_time=$(curl -w "%{time_total}" -o /dev/null -s "$url/api/health" 2>/dev/null || echo "0")
        if (( $(echo "$response_time > 2" | bc -l 2>/dev/null || echo "0") )); then
            echo -e "${YELLOW}[$current_time] ‚ö†Ô∏è  Temps de r√©ponse: ${response_time}s${NC}"
        fi
        
        sleep 30
    done
    
    log_success "Monitoring termin√©"
}

# Nettoyage
cleanup() {
    log_info "Nettoyage..."
    
    # Supprimer le fichier temporaire
    if [[ -f .deployment_url ]]; then
        rm .deployment_url
    fi
    
    log_success "Nettoyage termin√©"
}

# Gestion des erreurs
error_handler() {
    local exit_code=$?
    log_error "Erreur d√©tect√©e (code: $exit_code)"
    
    # Tentative de rollback si n√©cessaire
    if [[ -f .deployment_url ]]; then
        local deployment_url=$(cat .deployment_url)
        log_warning "Tentative de rollback vers la version pr√©c√©dente..."
        # Ici vous pouvez ajouter la logique de rollback
    fi
    
    cleanup
    exit $exit_code
}

# Configuration des gestionnaires d'erreurs
trap error_handler ERR
trap cleanup EXIT

# Fonction principale
main() {
    log_info "üöÄ D√©marrage du d√©ploiement Beriox AI"
    
    # V√©rifications pr√©liminaires
    check_prerequisites
    check_repository_status
    
    # Tests pr√©-d√©ploiement
    run_pre_deployment_tests
    
    # D√©ploiement
    deploy
    
    # R√©cup√©ration de l'URL de d√©ploiement
    if [[ ! -f .deployment_url ]]; then
        log_error "URL de d√©ploiement non trouv√©e"
        exit 1
    fi
    
    local deployment_url=$(cat .deployment_url)
    
    # V√©rification de sant√©
    if ! health_check "$deployment_url"; then
        log_error "Le d√©ploiement n'est pas en bonne sant√©"
        exit 1
    fi
    
    # Tests post-d√©ploiement
    if ! run_post_deployment_tests "$deployment_url"; then
        log_error "Les tests post-d√©ploiement ont √©chou√©"
        exit 1
    fi
    
    # Monitoring
    start_monitoring "$deployment_url"
    
    log_success "üéâ D√©ploiement r√©ussi!"
    log_info "URL: $deployment_url"
    log_info "Health check: $deployment_url/api/health"
    log_info "Monitoring: $deployment_url/api/monitoring/health"
}

# Ex√©cution du script
main "$@"
