#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de la configuration Google OAuth...\n');

// V√©rifier les variables d'environnement
const envPath = path.join(process.cwd(), '.env.local');
let envContent = '';

try {
  envContent = fs.readFileSync(envPath, 'utf8');
} catch (error) {
  console.log('‚ö†Ô∏è  Fichier .env.local non trouv√©');
}

// Extraire les variables importantes
const googleClientId = envContent.match(/GOOGLE_CLIENT_ID=(.+)/)?.[1];
const googleClientSecret = envContent.match(/GOOGLE_CLIENT_SECRET=(.+)/)?.[1];
const nextAuthUrl = envContent.match(/NEXTAUTH_URL=(.+)/)?.[1];
const nextAuthSecret = envContent.match(/NEXTAUTH_SECRET=(.+)/)?.[1];

console.log('üìã Configuration actuelle:');
console.log(`‚úÖ GOOGLE_CLIENT_ID: ${googleClientId ? '‚úÖ Configur√©' : '‚ùå Manquant'}`);
console.log(`‚úÖ GOOGLE_CLIENT_SECRET: ${googleClientSecret ? '‚úÖ Configur√©' : '‚ùå Manquant'}`);
console.log(`‚úÖ NEXTAUTH_URL: ${nextAuthUrl || '‚ùå Manquant'}`);
console.log(`‚úÖ NEXTAUTH_SECRET: ${nextAuthSecret ? '‚úÖ Configur√©' : '‚ùå Manquant'}`);

// URLs de redirection recommand√©es pour Google Console
console.log('\nüåê URLs de redirection √† configurer dans Google Console:');
console.log('üìù Allez sur: https://console.cloud.google.com/apis/credentials');
console.log('üìù S√©lectionnez votre projet et cliquez sur votre OAuth 2.0 Client ID');
console.log('üìù Dans "Authorized redirect URIs", ajoutez:');

const baseUrls = [
  'http://localhost:3000',
  'https://beriox-4quln7u9o-beriox.vercel.app',
  'https://beriox-gkif60yz0-beriox.vercel.app'
];

baseUrls.forEach(baseUrl => {
  console.log(`   ${baseUrl}/api/auth/callback/google`);
});

console.log('\nüîß URLs JavaScript autoris√©es:');
baseUrls.forEach(baseUrl => {
  console.log(`   ${baseUrl}`);
});

console.log('\nüìù URLs de d√©connexion autoris√©es:');
baseUrls.forEach(baseUrl => {
  console.log(`   ${baseUrl}/auth/signout`);
});

console.log('\nüí° Conseils:');
console.log('1. Assurez-vous que NEXTAUTH_URL correspond √† votre domaine de production');
console.log('2. V√©rifiez que toutes les URLs de redirection sont ajout√©es dans Google Console');
console.log('3. Le callback Google doit √™tre: /api/auth/callback/google');
console.log('4. En d√©veloppement, utilisez: http://localhost:3000');
console.log('5. En production, utilisez votre domaine Vercel');

// V√©rifier la configuration NextAuth
console.log('\nüîç V√©rification de la configuration NextAuth...');
const authPath = path.join(process.cwd(), 'src/lib/auth.ts');
try {
  const authContent = fs.readFileSync(authPath, 'utf8');
  
  if (authContent.includes('GoogleProvider')) {
    console.log('‚úÖ GoogleProvider configur√© dans auth.ts');
  } else {
    console.log('‚ùå GoogleProvider manquant dans auth.ts');
  }
  
  if (authContent.includes('callback/google')) {
    console.log('‚úÖ Callback Google configur√©');
  } else {
    console.log('‚ùå Callback Google manquant');
  }
  
} catch (error) {
  console.log('‚ùå Impossible de lire auth.ts');
}

console.log('\nüéØ Prochaines √©tapes:');
console.log('1. V√©rifiez la configuration dans Google Console');
console.log('2. Testez la connexion en local: npm run dev');
console.log('3. D√©ployez et testez en production');
console.log('4. V√©rifiez les logs Vercel pour les erreurs');
