#!/usr/bin/env node

/**
 * Script pour configurer info@beriox.ca comme super-admin
 * Beriox AI
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function setupSuperAdmin() {
  const superAdminEmail = 'info@beriox.ca';
  
  console.log('üîß Configuration du super-admin...');
  console.log(`üìß Email: ${superAdminEmail}`);
  
  try {
    // V√©rifier si l'utilisateur existe
    const existingUser = await prisma.user.findUnique({
      where: { email: superAdminEmail }
    });

    if (existingUser) {
      // Mettre √† jour le r√¥le existant
      if (existingUser.role === 'SUPER_ADMIN') {
        console.log('‚úÖ L\'utilisateur est d√©j√† super-admin');
        return;
      }

      console.log('üîÑ Mise √† jour du r√¥le utilisateur...');
      await prisma.user.update({
        where: { email: superAdminEmail },
        data: { role: 'SUPER_ADMIN' }
      });
      
      console.log('‚úÖ R√¥le mis √† jour vers SUPER_ADMIN');
    } else {
      // Cr√©er un nouvel utilisateur super-admin
      console.log('üÜï Cr√©ation d\'un nouvel utilisateur super-admin...');
      
      const newUser = await prisma.user.create({
        data: {
          email: superAdminEmail,
          name: 'Beriox Admin',
          role: 'SUPER_ADMIN',
          emailVerified: new Date(),
          // Cr√©er aussi les cr√©dits utilisateur
          userCredits: {
            create: {
              credits: 1000, // Cr√©dits de d√©part
              plan: 'enterprise',
              expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 an
            }
          }
        }
      });
      
      console.log('‚úÖ Utilisateur super-admin cr√©√© avec succ√®s');
      console.log(`üÜî ID: ${newUser.id}`);
    }

    // V√©rifier la configuration
    const verifiedUser = await prisma.user.findUnique({
      where: { email: superAdminEmail },
      include: {
        userCredits: true
      }
    });

    console.log('\nüìä Configuration finale:');
    console.log(`üë§ Nom: ${verifiedUser.name}`);
    console.log(`üìß Email: ${verifiedUser.email}`);
    console.log(`üîë R√¥le: ${verifiedUser.role}`);
    console.log(`üìÖ Cr√©√© le: ${verifiedUser.createdAt}`);
    console.log(`üí≥ Cr√©dits: ${verifiedUser.userCredits?.credits || 0}`);

    console.log('\nüéâ Configuration du super-admin termin√©e avec succ√®s !');
    console.log('üîê L\'utilisateur info@beriox.ca a maintenant acc√®s √† toutes les fonctionnalit√©s d\'administration.');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration du super-admin:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
if (require.main === module) {
  setupSuperAdmin()
    .then(() => {
      console.log('\n‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { setupSuperAdmin };
